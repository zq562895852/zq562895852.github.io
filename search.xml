<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[angular(基础篇-路由)]]></title>
    <url>%2F2018%2F11%2F22%2Fbasis-route%2F</url>
    <content type="text"><![CDATA[后续更新。。。 路由]]></content>
  </entry>
  <entry>
    <title><![CDATA[angular(基础篇-内置模块以及语法)]]></title>
    <url>%2F2018%2F11%2F21%2Fbasis%2F</url>
    <content type="text"><![CDATA[从app.module.ts说起 NgModules模块 NgModule 是一些带有 @NgModule 装饰器的类。@NgModule 装饰器的 imports 数组会告诉 Angular 哪些其它的 NgModule 是当前模块 所需的，一般都是在imports数组中放置一些内置模块以及服务。 CommonModule模块 CommonModule 导出所有基本的 Angular 指令和管道 NgIf(判断)、NgForOf(循环，也可用NgFor)、NgClass(添加删除css类)、NgStyle(修改样式)、NgSwitch(和NgIf类似) 等指令(还有更多)，以及一些 CurrencyPipe(数字转金额),DatePipe(日期格式化),DecimalPipe(数字转字符串) 等管道。 FormsModule , ReactiveFormsModule模块 FormsModule 许多和表单相关的指令，后面会详细介绍，ReactiveFormsModule 构建响应式表单，封装了根据规则提示的表单，后面详细介绍。 BrowserModule模块 BrowserModule 运行在浏览器中必须的模块 HttpClientModule模块 HttpClientModule 和服务器通讯的模块，一般是封装在单独的文件中 BrowserAnimationsModule , NoopAnimationsModule模块 BrowserAnimationsModule 开启动画 NoopAnimationsModule 关闭动画 RouterModule模块 RouterModule 路由相关模块 从最简单的说起 插值表达式 123&lt;p&gt;My current hero is &#123;&#123;name&#125;&#125;&lt;/p&gt;&lt;img src="&#123;&#123;imageUrl&#125;&#125;" style="height:30px"&gt;&lt;p&gt;The sum of 1 + 1 is not &#123;&#123;1 + 1 + getVal()&#125;&#125;&lt;/p&gt; 支持简单的表达式，不支持赋值运算符，位运算，自增自减等比较复杂的 事件绑定 123&lt;button (click)="deleteHero()"&gt;Delete&lt;/button&gt;&lt;button (click)="onSave($event)"&gt;Save&lt;/button&gt; '$event事件对象'&lt;input [value]="currentHero.name" (input)="currentHero.name=$event.target.value" &gt; 和vue差不多，其实很多框架都比较类似，当然也可以用bind-、on-、bindon-前缀绑定 数据绑定 12345678910111213141516171819&lt;img bind-src="imageUrl"&gt;&lt;img [src]="imageUrl"&gt; '属性绑定等价与上面'&lt;button [disabled]="isUnchanged"&gt;Save&lt;/button&gt; '属性绑定'&lt;div [ngClass]="&#123;'special': isSpecial&#125;"&gt;&lt;/div&gt; '类绑定不会覆盖已有的类，只会添加或删除当前类'&lt;input [(ngModel)]="name"&gt; '双向绑定，官方叫她' &gt;&gt;盒子里放香蕉&lt;button [attr.aria-label]="help"&gt;help&lt;/button&gt; '自定义属性等'&lt;div [class.special]="isSpecial"&gt;Special&lt;/div&gt; 'css类名不会覆盖已有的类'&lt;button [style.color]="isSpecial ? 'red' : 'green'"&gt; '行内样式'&lt;button [style.font-size.em]="isSpecial ? 3 : 1" &gt;Big&lt;/button&gt;&lt;button [style.font-size.%]="!isSpecial ? 150 : 50" &gt;Small&lt;/button&gt;&lt;app-hero-detail [hero]="currentHero"&gt;&lt;/app-hero-detail&gt; '组件传值，方括号一定要有，否则就是字符串了'&lt;div class="bad curly special" [class]="badCurly"&gt;Bad curly&lt;/div&gt; '官方说badCurly有或无会覆盖原有的类 亲测在有[class.special]，[ngClass]同时存在的情况下不会覆盖'&lt;p&gt;&lt;img src="&#123;&#123;heroImageUrl&#125;&#125;"&gt; is the &lt;i&gt;interpolated&lt;/i&gt; image.&lt;/p&gt;&lt;p&gt;&lt;img [src]="heroImageUrl"&gt; is the &lt;i&gt;property bound&lt;/i&gt; image.&lt;/p&gt; '上面和下面这两种数据绑定作用相同'&lt;p&gt;&lt;span&gt;"&#123;&#123;title&#125;&#125;" is the &lt;i&gt;interpolated&lt;/i&gt; title.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;"&lt;span [innerHTML]="title"&gt;&lt;/span&gt;" is the &lt;i&gt;property bound&lt;/i&gt; title.&lt;/p&gt; 模板绑定是通过 property 和事件来工作的(官方介绍的比较详细可以去看官方文档) 结构模板指令 1234567891011121314151617181920212223242526272829303132333435363738&lt;div *ngIf="isActive"&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;&lt;app-hero-detail *ngIf="isActive"&gt;&lt;/app-hero-detail&gt; 'if判断，必须带*号'&lt;div *ngFor="let hero of heroes"&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;&lt;app-hero-detail *ngFor="let hero of heroes" [hero]="hero"&gt;&lt;/app-hero-detail&gt;'循环'&lt;div *ngFor="let hero of heroes; let i=index"&gt;&#123;&#123;i + 1&#125;&#125; - &#123;&#123;hero.name&#125;&#125;&lt;/div&gt;'带索引的 必须声明i否则拿不到索引'&lt;el-menu default-active="1" class="el-menu-vertical-demo" theme="dark"&gt; &lt;el-submenu *ngFor="let menu of menuList" [title]="menu.title"&gt; &lt;ng-container *ngIf = "menu.hasChildren;else menuBlock"&gt; &lt;el-menu-item-group *ngFor="let subMenu of menu.subs" &gt; &lt;el-submenu [title]="subMenu.title"&gt; &lt;el-menu-item *ngFor="let subsMenu of subMenu.subMenu" [to]="subsMenu.index"&gt;&#123;&#123;subsMenu.title&#125;&#125;&lt;/el-menu-item&gt; &lt;/el-submenu&gt; &lt;/el-menu-item-group&gt; &lt;/ng-container&gt; &lt;ng-template #menuBlock&gt; &lt;el-menu-item *ngFor="let subMenu of menu.subs" [to]="subMenu.index"&gt;&#123;&#123;subMenu.title&#125;&#125;&lt;/el-menu-item&gt; &lt;/ng-template&gt; &lt;/el-submenu&gt; &lt;/el-menu&gt;'在这种循环和判断的模块中一个元素不能有多个块，上面这个例子，也就是不能把ngIf和ngFor放在同一个元素上否则报错，if判断的else语句使用要用#后面用else的部分'&lt;div *ngFor="let hero of heroes; trackBy: trackByHeroes"&gt; (&#123;&#123;hero.id&#125;&#125;) &#123;&#123;hero.name&#125;&#125;&lt;/div&gt; 'trackBy有点像vue中key但是要声明才能使用'&lt;div [ngSwitch]="currentHero.emotion"&gt; &lt;app-happy-hero *ngSwitchCase="'happy'" [hero]="currentHero"&gt;&lt;/app-happy-hero&gt; &lt;app-sad-hero *ngSwitchCase="'sad'" [hero]="currentHero"&gt;&lt;/app-sad-hero&gt; &lt;app-confused-hero *ngSwitchCase="'confused'" [hero]="currentHero"&gt;&lt;/app-confused-hero&gt; &lt;app-unknown-hero *ngSwitchDefault [hero]="currentHero"&gt;&lt;/app-unknown-hero&gt;&lt;/div&gt; 'ngSwitch指令和js一样的写法'&lt;input #phone placeholder="phone number"&gt; '模板变量可以在其他位置拿到这个元素，以#或者ref声明这个变量'&lt;button (click)="callPhone(phone.value)"&gt;Call&lt;/button&gt;'模板变量作用整个模板作用域和循环let声明是不同的' 管道操作符 123456789&lt;div&gt;Title through uppercase pipe: &#123;&#123;title | uppercase&#125;&#125;&lt;/div&gt; '用法|后面跟名字即可'&lt;div&gt;Title through a pipe chain:&#123;&#123;title | uppercase | lowercase&#125;&#125;&lt;/div&gt;'可以有多个'&lt;div&gt;Birthdate: &#123;&#123;currentHero?.birthdate | date:'longDate'&#125;&#125;&lt;/div&gt;'传值'&lt;div&gt;&#123;&#123;currentHero | json&#125;&#125;&lt;/div&gt; '调试可以输出整个对象，数组'&lt;div&gt;The name is &#123;&#123;nullHero?.name&#125;&#125;&lt;/div&gt; '安全操作符，当对象nullHero为null时不会报错，这点比vue做的好，当然也可以多级像a?.b?.c?.d这样多级判断'&lt;div&gt; The marker is &#123;&#123;$any(hero).marker&#125;&#125;&lt;/div&gt; '类型转换函数没用过暂时还不是很清楚，官方说防止类型转换错误']]></content>
  </entry>
  <entry>
    <title><![CDATA[angular(基础篇-文件信息)]]></title>
    <url>%2F2018%2F11%2F12%2Findex%2F</url>
    <content type="text"><![CDATA[文件介绍(angualr-cli生成的项目)生成的项目最外层结构(如图)，主要都集中在src文件夹和angular-cli.json这个文件中 angular-cli.json的主要信息 src目录的主要信息 main.ts入口信息 app目录的主要信息]]></content>
  </entry>
  <entry>
    <title><![CDATA[angular-cli]]></title>
    <url>%2F2018%2F11%2F07%2Fhome%2F</url>
    <content type="text"><![CDATA[写在前面 最近闲着没事，就折腾了一下angular-cli,官方文档anguar-cli, 由于许多东西还在研究，后续持续更新… angular-cli 命令合集项目生成12345$ npm install -g @angular/cli "全局安装"$ ng new myProject "创建新项目 myProject 是项目文件名"$ cd myProject "进入 myProject 文件夹"$ ng server "server/serve都可以，但是我碰到serve启动不成功的情况，这可能和版本更新有关。默认情况下ng会安装依赖，不需要npm install 就可以直接启动"$ ng new myProject --routing "这个命令可以直接生成带有路由的项目，一般都会用的到，当然除了--routing还有其他的参数--prefix组件的前缀" 创建项目具体模块1234567$ ng generate class my-new-class // 新建 class$ ng generate component my-new-component // 新建组件$ ng generate directive my-new-directive // 新建指令$ ng generate enum my-new-enum // 新建枚举$ ng generate module my-new-module // 新建模块$ ng generate pipe my-new-pipe // 新建管道$ ng generate service my-new-service // 新建服务 简写(使用命令的好处是不用在文件来回引入，引入文件很多，很容易遗漏)1234567$ ng g cl my-new-class // 新建 class$ ng g c my-new-component // 新建组件$ ng g d my-new-directive // 新建指令$ ng g e my-new-enum // 新建枚举$ ng g m my-new-module // 新建模块$ ng g p my-new-pipe // 新建管道$ ng g s my-new-service // 新建服务 说明 如果有多个模块，使用命令创建组件要指定组件所属的模块，不指定会默认创建app.module的组件，但是有时候可能会报错。 12$ ng g c my-new-component --module=app-routing // 创建属于路由模块的组件，在路由模块会自动引入该模块$ ng g c my-new-component // 如果不指定模块默认所属在app.module模块中]]></content>
  </entry>
</search>
