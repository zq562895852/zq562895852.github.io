<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张旗</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zq562895852.github.io/"/>
  <updated>2019-03-20T01:55:21.807Z</updated>
  <id>https://zq562895852.github.io/</id>
  
  <author>
    <name>张旗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack配置说明</title>
    <link href="https://zq562895852.github.io/2019/03/22/webpack/baseConfig/"/>
    <id>https://zq562895852.github.io/2019/03/22/webpack/baseConfig/</id>
    <published>2019-03-22T02:15:16.000Z</published>
    <updated>2019-03-20T01:55:21.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-base-conf-js-基础配置，一般情况下是生产和开发都要用的"><a href="#webpack-base-conf-js-基础配置，一般情况下是生产和开发都要用的" class="headerlink" title="webpack.base.conf.js(基础配置，一般情况下是生产和开发都要用的)"></a>webpack.base.conf.js(基础配置，一般情况下是生产和开发都要用的)</h3><ul><li>此配置以react为例配置的<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> path = require(<span class="string">'path'</span>);</span><br><span class="line">const MiniCssExtractPlugin = require(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line">// 拼接绝对路径</span><br><span class="line"><span class="keyword">function</span> resolve(dir)&#123;</span><br><span class="line">    <span class="built_in">return</span> path.join(__dirname,<span class="string">'..'</span>,dir)</span><br><span class="line">&#125;</span><br><span class="line">console.log(process.env.NODE_ENV);</span><br><span class="line">// 区分环境</span><br><span class="line">const isDev = process.env.NODE_ENV===<span class="string">'development'</span>;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    context: path.join(__dirname,<span class="string">'..'</span>),//执行环境</span><br><span class="line">    // 入口</span><br><span class="line">    entry:&#123;</span><br><span class="line">    app:<span class="string">'./src/main.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        modules: [ // 指定以下目录寻找第三方模块，避免webpack往父级目录递归搜索</span><br><span class="line">            resolve(<span class="string">'src'</span>),</span><br><span class="line">            resolve(<span class="string">'node_modules'</span>),</span><br><span class="line">        ],</span><br><span class="line">        mainFields: [<span class="string">'main'</span>], // 只采用main字段作为入口文件描述字段，减少搜索步骤</span><br><span class="line">        <span class="built_in">alias</span>: &#123;</span><br><span class="line">            <span class="string">"@"</span>: resolve(<span class="string">"src"</span>), // 缓存src目录为@符号，避免重复寻址</span><br><span class="line">            // <span class="string">'react/lib/ReactMount'</span>: <span class="string">'react-dom/lib/ReactMount'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>:/\.jsx?$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                include:[// 表示只解析以下目录，减少loader处理范围</span><br><span class="line">                    resolve(<span class="string">'src'</span>)</span><br><span class="line">                ],</span><br><span class="line">                loader: <span class="string">"happypack/loader?id=happy-babel"</span> //开启多进程loader处理的插件的配置</span><br><span class="line">            &#125;,</span><br><span class="line">            // 处理css中的图片  由于目前没有更好的办法处理js和css中的图片路径问题，所以使用两个loader分别处理不同的寻址问题</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.(png|jpe?g|gif|svg)$/,</span><br><span class="line">                include:[// 表示只解析以下目录，减少loader处理范围  这里放css中引用的图片</span><br><span class="line">                    resolve(<span class="string">'src/assets'</span>)</span><br><span class="line">                ],</span><br><span class="line">                use:[</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                    <span class="built_in">limit</span>: 10000,</span><br><span class="line">                    name: <span class="string">'images/[name].[hash:7].[ext]'</span>,</span><br><span class="line">                    publicPath:<span class="string">'../'</span>,//这是处理的是css中引用的路径，由于css样式表在css文件夹下，img在images文件夹下，并且css文件夹和images在同一级，所以向上查找一级</span><br><span class="line">                    outputPath:<span class="string">'static'</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            // 处理js中的图片  是根据生成html的路径处理的 这样不管是在页面中引入，还是在css中引入都可以正确处理图片路径，但是图片要分开放在不同的文件夹下，如果是css的图片就直接放在assets文件夹下，如果是js中引入就直接放在static中 当然也可以放在同一文件夹下不同的文件内</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.(png|jpe?g|gif|svg)$/,</span><br><span class="line">                include:[// 表示只解析以下目录，减少loader处理范围  这里放js中引用的图片</span><br><span class="line">                    resolve(<span class="string">'src/static'</span>)</span><br><span class="line">                ],</span><br><span class="line">                use:[</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                    <span class="built_in">limit</span>: 10000,</span><br><span class="line">                    name: <span class="string">'images/[name].[hash:7].[ext]'</span>,</span><br><span class="line">                    publicPath:<span class="string">'../static'</span>,//这是处理的是js中引用的路径，由于是在js中动态设置，这里页面在pages下面，所以这里要向外翻一级并且在static目录下</span><br><span class="line">                    outputPath:<span class="string">'static'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            // 由于抽离的css在热重载中不生效，所以dev环境采用style标签的方式</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>:/\.css$/,</span><br><span class="line">                // exclude:/node_modules/,</span><br><span class="line">                include:[// 表示只解析以下目录，减少loader处理范围</span><br><span class="line">                    resolve(<span class="string">'src'</span>),</span><br><span class="line">                    resolve(<span class="string">'node_modules'</span>),</span><br><span class="line">                ],</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:isDev?<span class="string">'style-loader'</span>:MiniCssExtractPlugin.loader,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            //publicPath:<span class="string">'../'</span> ,//这里的路径是以url-loader的路径为主</span><br><span class="line">                            // outputPath:<span class="string">'../'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">'happypack/loader?id=happy-css'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            // 处理html中的img标签src引入图片</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>:/\.html$/,</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:<span class="string">"html-loader"</span>,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            attrs:[<span class="string">"img:src"</span>]  //此处的参数值  img是指html中的 &lt;img/&gt; 标签， src是指 img的src属性   表示 html-loader 作用于 img标签中的 src的属性</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        // new MiniCssExtractPlugin(&#123;</span><br><span class="line">        //     filename:utils.assetsPath(<span class="string">'css/[name].[contenthash].css'</span>),</span><br><span class="line">        //     chunkFilename:utils.assetsPath(<span class="string">'css/[id].[contenthash].css'</span>)</span><br><span class="line">        // &#125;)</span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="webpack-dev-conf-js-开发环境"><a href="#webpack-dev-conf-js-开发环境" class="headerlink" title="webpack.dev.conf.js(开发环境)"></a>webpack.dev.conf.js(开发环境)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> path = require(<span class="string">'path'</span>);</span><br><span class="line">// 引入合并配置的插件</span><br><span class="line"><span class="built_in">let</span> merge = require(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="built_in">let</span> webpackBaseConf = require(<span class="string">'./webpack.base.conf'</span>);</span><br><span class="line">// 生成html插件</span><br><span class="line"><span class="built_in">let</span> htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">// 热重载</span><br><span class="line"><span class="built_in">let</span> webpack = require(<span class="string">'webpack'</span>);</span><br><span class="line">//抽离css的插件</span><br><span class="line">const MiniCssExtractPlugin = require(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="built_in">let</span> utils = require(<span class="string">'./utils.js'</span>);</span><br><span class="line">// 开启多进程编译提升编译速度</span><br><span class="line">const HappyPack = require(<span class="string">'happypack'</span>);</span><br><span class="line">// 使用HappyPack开启多进程Loader转换</span><br><span class="line">const happyThreadPool = HappyPack.ThreadPool(&#123; size: 5 &#125;);</span><br><span class="line">const createHappyPlugin = (id, loaders) =&gt; new HappyPack(&#123;</span><br><span class="line">    id: id,</span><br><span class="line">    loaders: loaders,</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">    verbose: process.env.HAPPY_VERBOSE === <span class="string">'1'</span> // make happy more verbose with HAPPY_VERBOSE=1</span><br><span class="line">&#125;);</span><br><span class="line">// 拷贝目录</span><br><span class="line">const CopyWebpackPlugin = require(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line">module.exports = merge(webpackBaseConf,&#123;</span><br><span class="line">    mode:<span class="string">'development'</span>,//开发环境</span><br><span class="line">    //原始代码，更易看到出错的地方</span><br><span class="line">    devtool:<span class="string">'eval-source-map'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.join(__dirname,<span class="string">'..'</span>,<span class="string">'dist'</span>),//打包文件夹</span><br><span class="line">        filename:<span class="string">'static/js/[name].js'</span>,//打包到dist目录下js文件夹下</span><br><span class="line">        chunkFilename:<span class="string">'static/js/[id].js'</span></span><br><span class="line">    //   publicPath:<span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    devServer:&#123;//开发服务器配置</span><br><span class="line">        contentBase: path.join(__dirname,<span class="string">'..'</span>, <span class="string">'dist'</span>),</span><br><span class="line">        host:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        hot:<span class="literal">true</span>,//开启热重载</span><br><span class="line">        port:3000,//访问端口</span><br><span class="line">        open:<span class="literal">true</span>,//自动打开浏览器，</span><br><span class="line">        progress:<span class="literal">true</span>,//进度，</span><br><span class="line">        // noInfo:<span class="literal">true</span>,</span><br><span class="line">        historyApiFallback:&#123;</span><br><span class="line">            rewrites:[</span><br><span class="line">                &#123;from:/^\/$/,to:<span class="string">'/pages/index.html'</span>&#125; //这里一定要以 /  开头，在根目录下查找</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        proxy:&#123;//代理配置</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            // 处理字体文件</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.(eot|woff2?|ttf)$/,</span><br><span class="line">                use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    loader:<span class="string">'url-loader'</span>,</span><br><span class="line">                    // options: &#123;</span><br><span class="line">                    //   name: <span class="string">"[name]-[hash:5].min.[ext]"</span>,</span><br><span class="line">                    //   <span class="built_in">limit</span>: 5000, // fonts file size &lt;= 5KB, use <span class="string">'base64'</span>; <span class="keyword">else</span>, output svg file</span><br><span class="line">                    //   publicPath: <span class="string">"../fonts/"</span>,//字体图表向上翻一级在css文件夹的同一级</span><br><span class="line">                    //   outputPath: <span class="string">"static/fonts/"</span>//输出路径</span><br><span class="line">                    // &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        // new webpack.EnvironmentPlugin(&#123;</span><br><span class="line">        //     NODE_ENV: <span class="string">'development'</span>, // 除非有定义 process.env.NODE_ENV，否则就使用 <span class="string">'development'</span></span><br><span class="line">        //     DEBUG: <span class="literal">false</span></span><br><span class="line">        // &#125;),</span><br><span class="line">        // new webpack.DefinePlugin(&#123;</span><br><span class="line">        //     <span class="string">"process.env"</span>:JSON.stringify(<span class="string">'development'</span>),</span><br><span class="line">        //     <span class="string">"server_url"</span>:JSON.stringify(<span class="string">'http://dwy.msyuns.com/'</span>)</span><br><span class="line">        // &#125;),</span><br><span class="line">        //开发环境下可以不用抽离css</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'static/css/[name].[contenthash].css'</span>,</span><br><span class="line">            chunkFilename:<span class="string">'static/css/[id].[contenthash].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        createHappyPlugin(<span class="string">'happy-babel'</span>, [&#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                babelrc: <span class="literal">true</span>,</span><br><span class="line">                cacheDirectory: <span class="literal">true</span> // 启用缓存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]),</span><br><span class="line">        createHappyPlugin(<span class="string">'happy-css'</span>, [<span class="string">'css-loader'</span>]),</span><br><span class="line">        // 拷贝文件  主要处理js中和css中图片寻址问题 因为所处文件夹的不同导致无法统一处理，所以采用这种方式</span><br><span class="line">        // new CopyWebpackPlugin([</span><br><span class="line">        //     &#123;from:<span class="string">'src/static/images'</span>,to:<span class="string">'static/images'</span>&#125;</span><br><span class="line">        // ]),</span><br><span class="line">        // 当接收到热更新信号时，在浏览器console控制台打印更多可读性高的模块名称等信息</span><br><span class="line">        new webpack.NamedModulesPlugin(),</span><br><span class="line">        // 开启webpack全局热更新</span><br><span class="line">        new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'pages/index.html'</span>,</span><br><span class="line">            template:<span class="string">'./src/pages/index.html'</span>,</span><br><span class="line">            inject:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="webpack-prod-conf-js-生产环境"><a href="#webpack-prod-conf-js-生产环境" class="headerlink" title="webpack.prod.conf.js(生产环境)"></a>webpack.prod.conf.js(生产环境)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> path = require(<span class="string">'path'</span>);</span><br><span class="line">// 引入合并配置的插件</span><br><span class="line"><span class="built_in">let</span> merge = require(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="built_in">let</span> webpackBaseConf = require(<span class="string">'./webpack.base.conf'</span>);</span><br><span class="line">// 生成html插件</span><br><span class="line"><span class="built_in">let</span> htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">// 开启多进程编译提升编译速度</span><br><span class="line">const HappyPack = require(<span class="string">'happypack'</span>);</span><br><span class="line">// 使用HappyPack开启多进程Loader转换</span><br><span class="line">const happyThreadPool = HappyPack.ThreadPool(&#123; size: 5 &#125;);</span><br><span class="line">const createHappyPlugin = (id, loaders) =&gt; new HappyPack(&#123;</span><br><span class="line">    id: id,</span><br><span class="line">    loaders: loaders,</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">    verbose: process.env.HAPPY_VERBOSE === <span class="string">'1'</span> // make happy more verbose with HAPPY_VERBOSE=1</span><br><span class="line">&#125;);</span><br><span class="line">// 抽离css的插件</span><br><span class="line">const MiniCssExtractPlugin = require(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line">// 压缩css的插件</span><br><span class="line">const OptimizeCSSAssetsPlugin = require(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line">// 压缩js的插件，可以多进程压缩 据说这个没人维护了，问题没人处理所以不用</span><br><span class="line">const ParallelUglifyPlugin = require(<span class="string">'webpack-parallel-uglify-plugin'</span>);</span><br><span class="line">// 有说这个压缩的，但是没找到详细的配置</span><br><span class="line">// const TerserPlugin = require(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line">// 用官方的压缩插件</span><br><span class="line">const UglifyJSPlugin = require(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line">// 拷贝目录</span><br><span class="line">const CopyWebpackPlugin = require(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> utils = require(<span class="string">'./utils.js'</span>);</span><br><span class="line">const CleanWebpackPlugin = require(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line">module.exports = merge(webpackBaseConf,&#123;</span><br><span class="line">    mode:<span class="string">'production'</span>,</span><br><span class="line">    devtool:<span class="string">'none'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.join(__dirname,<span class="string">'..'</span>,<span class="string">'dist'</span>),//打包文件夹</span><br><span class="line">        filename:<span class="string">'static/js/[name].[contenthash:8].js'</span>,//打包到dist目录下static/js文件夹下</span><br><span class="line">        chunkFilename:<span class="string">'static/js/[id].[contenthash:8].js'</span>,</span><br><span class="line">        publicPath:<span class="string">'../'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            // 处理字体文件</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.(eot|woff2?|ttf)$/,</span><br><span class="line">                use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    loader:<span class="string">"url-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                    name: <span class="string">"[name]-[hash:5].min.[ext]"</span>,</span><br><span class="line">                    <span class="built_in">limit</span>: 5000, // fonts file size &lt;= 5KB, use <span class="string">'base64'</span>; <span class="keyword">else</span>, output svg file</span><br><span class="line">                    publicPath: <span class="string">"../fonts/"</span>,//字体图表向上翻一级在css文件夹的同一级</span><br><span class="line">                    outputPath: <span class="string">"static/fonts/"</span>//输出路径</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        // 抽离css的情况下，默认的压缩css的配置失效了，所以需要我们手动压缩</span><br><span class="line">        minimizer:[</span><br><span class="line">            //    说是这个压缩没人维护了</span><br><span class="line">            // new ParallelUglifyPlugin(&#123; // 多进程压缩</span><br><span class="line">            //     cacheDir: <span class="string">'.cache/'</span>,</span><br><span class="line">            //     uglifyJS: &#123;</span><br><span class="line">            //         output: &#123;</span><br><span class="line">            //             comments: <span class="literal">false</span>,</span><br><span class="line">            //             beautify: <span class="literal">false</span></span><br><span class="line">            //         &#125;,</span><br><span class="line">            //         compress: &#123;</span><br><span class="line">            //             warnings: <span class="literal">false</span>,</span><br><span class="line">            //             drop_console: <span class="literal">true</span>,</span><br><span class="line">            //             collapse_vars: <span class="literal">true</span>,</span><br><span class="line">            //             reduce_vars: <span class="literal">true</span></span><br><span class="line">            //         &#125;</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;),</span><br><span class="line">        ],</span><br><span class="line">        splitChunks:&#123;//分割代码</span><br><span class="line">            chunks: <span class="string">"all"</span>, // 共有三个值可选：initial(初始模块)、async(按需加载模块)和all(全部模块)</span><br><span class="line">            minSize: 30000, // 模块超过30k自动被抽离成公共模块</span><br><span class="line">            maxSize:0,</span><br><span class="line">            minChunks: 1, // 模块被引用&gt;=1次，便分割</span><br><span class="line">            maxAsyncRequests: 5,  // 异步加载chunk的并发请求数量&lt;=5</span><br><span class="line">            maxInitialRequests: 3, // 一个入口并发加载的chunk数量&lt;=3</span><br><span class="line">            name: <span class="literal">true</span>, // 默认由模块名+<span class="built_in">hash</span>命名，名称相同时多个模块将合并为1个，可以设置为<span class="keyword">function</span></span><br><span class="line">            automaticNameDelimiter: <span class="string">'~'</span>, // 命名分隔符</span><br><span class="line">            cacheGroups:&#123;//缓存公共模块</span><br><span class="line">                default: &#123; // 模块缓存规则，设置为<span class="literal">false</span>，默认缓存组将禁用</span><br><span class="line">                    minChunks: 2, // 模块被引用&gt;=2次，拆分至vendors公共模块</span><br><span class="line">                    priority: -20, // 优先级</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>, // 默认使用已有的模块</span><br><span class="line">                &#125;,</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    <span class="built_in">test</span>: /[\\/]node_modules[\\/]/, // 表示默认拆分node_modules中的模块</span><br><span class="line">                    // <span class="built_in">test</span>: /[\\/]node_modules[\\/](react|react-dom)[\\/]/, 抽离node_modules中的react和react-dom模块</span><br><span class="line">                    priority: -10</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        // 打包前删除之前打包的文件夹</span><br><span class="line">        new CleanWebpackPlugin(&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        // 提取css到单独的文件下</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'static/css/[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename:<span class="string">'static/css/[id].[contenthash:8].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCSSAssetsPlugin(&#123;&#125;),//这里是压缩css</span><br><span class="line">        // 采用多进程打包提升打包的速度</span><br><span class="line">        createHappyPlugin(<span class="string">'happy-babel'</span>, [&#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                babelrc: <span class="literal">true</span>,</span><br><span class="line">                cacheDirectory: <span class="literal">true</span> // 启用缓存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]),</span><br><span class="line">        // 网上有说采用这种方式有转化不完全的可能，但是css目前没有发现有什么问题，less,sass,styl,等没有测试</span><br><span class="line">        createHappyPlugin(<span class="string">'happy-css'</span>, [<span class="string">'css-loader'</span>]),</span><br><span class="line">        // 拷贝文件  主要处理js中和css中图片寻址问题 因为所处文件夹的不同导致无法统一处理，所以采用这种方式 由于是拷贝的文件，未经过loader处理所以js中使用目录以生成的html文件夹为路径寻址 或者  采用loader分开处理不同文件夹下的图片，这里不再采用这种方式，因为根据生成的文件夹处理，没有路径提示，很不方便</span><br><span class="line">        // new CopyWebpackPlugin([</span><br><span class="line">        //     &#123;from:<span class="string">'src/static/images'</span>,to:<span class="string">'static/images'</span>&#125;</span><br><span class="line">        // ]),</span><br><span class="line">        new UglifyJSPlugin(&#123;</span><br><span class="line">            uglifyOptions: &#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">            warnings: <span class="literal">false</span>,//不显示警告信息</span><br><span class="line">            drop_console: <span class="literal">true</span>,//console</span><br><span class="line">            pure_funcs: [<span class="string">'console.log'</span>]//移除console</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // sourceMap: config.build.productionSourceMap,</span><br><span class="line">        parallel: <span class="literal">true</span>//使用多进程并行运行来提高构建速度。默认并发运行次数:os.cpus().length- 1。</span><br><span class="line">        &#125;),</span><br><span class="line">        // 这里html也可以压缩，配置也相当简单，由于是测试就不在配置</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'pages/index.html'</span>,</span><br><span class="line">            template:<span class="string">'./src/pages/index.html'</span>,</span><br><span class="line">            inject:<span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>由于webpack是基于node的，所以在了解node后要更容易学习webpack</li><li>在配置中基本的loader配置比较简单，这也是webpack最重要的机制，但是抽离打包上线的优化还是比较繁琐的，包括缓存，抽离公共js,抽离第三方库，以及控制文件的大小，开启gzip压缩等，但是这些又是生产环境所必须的，所以这些必须的配置webpack已经做了很多，但是有些还是需要我们根据自己需要手动配置。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webpack-base-conf-js-基础配置，一般情况下是生产和开发都要用的&quot;&gt;&lt;a href=&quot;#webpack-base-conf-js-基础配置，一般情况下是生产和开发都要用的&quot; class=&quot;headerlink&quot; title=&quot;webpack.ba
      
    
    </summary>
    
      <category term="webpack" scheme="https://zq562895852.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://zq562895852.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础</title>
    <link href="https://zq562895852.github.io/2019/01/12/nodestudynotes/mysql/"/>
    <id>https://zq562895852.github.io/2019/01/12/nodestudynotes/mysql/</id>
    <published>2019-01-12T07:15:16.000Z</published>
    <updated>2019-03-19T07:34:33.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql-基本语法"><a href="#mysql-基本语法" class="headerlink" title="mysql 基本语法"></a>mysql 基本语法</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><hr><p>   mysql是对大小写不敏感的，所以大小写都可以</p><hr><ul><li>查询表中所有字段(users，orders为表名，以下相同)<br><code>select * from users;</code></li><li>根据id查询<br><code>select * from users where id=?</code>;</li><li>根据查找范围查询<br><code>select * from users where user.age between age1 and age2</code>;选取介于两个值之间的 <strong>(包含两个临界值)</strong> 数据范围内的值。这些值可以是数值、文本或者日期。</li><li><p>根据排序查询<br><code>select * from users order by  user.age desc</code>;desc是降序，asc是升序</p></li><li><p>查询限定条目<br><code>select * from users limit 5</code>;从users表中查询五条数据</p></li><li><p>模糊查询<br><code>SELECT * FROM users WHERE name LIKE &#39;%mysql%&#39;</code>;查询users表中name包含mysql的数据</p></li><li><p>连表查询 (根据users表中的id和orders表中的userId相同查询)<br><code>select * from users left join orders on users.id=orders.userId</code></p></li><li>连表查询并排序<br><code>select * from users left join orders on users.id=orders.userId order by users.age desc</code>;</li><li>连表查询 (选取users表中的所有字段，并且只取orders表中的title字段)<br><code>select users.*,orders.title from users left join orders on users.id = orders.userId</code></li></ul><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><ul><li>插入一条数据<br><code>insert into users values(name,age,...)</code>;如果不指定要插入数据的列名需要列出插入行的每一列数据(包括定义的自增id)；<br><code>insert into users(name,age,...) values(&#39;mysql&#39;,20,...)</code>;</li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul><li>根据id更新数据<br><code>update users set name=&#39;mysql,age=20 where id=?&#39;</code>;  <strong>(如果不指定where条件，会更新整张表，切记： 在更新记录时要格外小心！执行没有 WHERE 子句的 UPDATE 要慎重，再慎重。)</strong> 在 MySQL 中可以通过设置 sql_safe_updates 这个自带的参数来解决，当该参数开启的情况下，你必须在update 语句后携带 where 条件，否则就会报错</li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li>删除数据<br><code>delete from users</code> 或者<br><code>delete * from users where name=&#39;mysql&#39;m,and age=16</code>;<br><strong>(WHERE 子句规定哪条记录或者哪些记录需要删除。如果您省略了 WHERE 子句，所有的记录都将被删除！，在删除记录时要格外小心！但是配合事务可以回滚数据)</strong> </li><li>一般我们用软删除<ul><li>软删除是对于这条记录做一个标记，比如用户名这一条数据我们可以加一个isDel这个字段，当为1时表示存在，当为0时表示删除，在我们查询的时候我们过滤掉isDel为0的数据即可，在执行操作的时候我们用update语句<br><code>update users set isDel=0 where id=?</code><h3 id="聚合函数-不统计null值"><a href="#聚合函数-不统计null值" class="headerlink" title="聚合函数(不统计null值)"></a>聚合函数(不统计null值)</h3></li><li>求和<br><code>select sum(price) from orders</code>;获取某个值(price)的总和</li><li>平均数<br><code>select avg(price) from orders</code>;获取所有price的平均值(不包括null值);</li><li>计数<br><code>select count(*) from orders</code>;获取数据的总条数；</li><li>最大值<br><code>select max(price) from orders</code>;获取最大值,min相同</li></ul></li></ul><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li>添加分组<br><code>ALTER TABLE orders ADD group_id VARCHAR(32)</code>;在orders表中添加分组group_id;</li><li>设置group_id<br><code>update orders set group_id=?</code>;</li><li>根据条件查询<br><code>select avg(price) from orders group by group_id having avg(price)&gt;3000</code>;查询以group_id分组的平均值大于3000的平均价格；</li></ul><hr><p>总结：<br>   (顺序一般如下排列)<br>   select  后面跟查询的字段<br>   from   后面跟表名<br>   where  查询条件<br>   group by 分组名称<br>   having  分组后带有条件的只能使用hanving<br>   order by 必须放到最后面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mysql-基本语法&quot;&gt;&lt;a href=&quot;#mysql-基本语法&quot; class=&quot;headerlink&quot; title=&quot;mysql 基本语法&quot;&gt;&lt;/a&gt;mysql 基本语法&lt;/h3&gt;&lt;h4 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="mysql" scheme="https://zq562895852.github.io/categories/mysql/"/>
    
    
      <category term="mysql学习笔记" scheme="https://zq562895852.github.io/tags/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>node学习(进阶)</title>
    <link href="https://zq562895852.github.io/2019/01/12/nodestudynotes/nodeadvanced/"/>
    <id>https://zq562895852.github.io/2019/01/12/nodestudynotes/nodeadvanced/</id>
    <published>2019-01-12T06:15:16.000Z</published>
    <updated>2019-03-19T07:11:54.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-ejs-express-的使用"><a href="#node-ejs-express-的使用" class="headerlink" title="node + ejs + express 的使用"></a>node + ejs + express 的使用</h3><ul><li>项目初始化<ul><li><code>npm init -y</code></li><li>安装express、ejs、mysql、 <code>npm i express ejs mysql -S</code>;</li><li>在根目录创建入口文件app.js、views文件夹：主要放模板页面，router文件夹：主要放路由相关，<br>controller文件夹：主要放业务逻辑，model文件夹：主要数据操作，static文件夹：主要放静态资源，node_modules主要放npm安装包</li><li>目录结构如下<br><img src="/2019/01/12/nodestudynotes/nodeadvanced/project.jpg" alt="项目结构"><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3></li></ul><ul><li>主要开启服务器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//引入第三方框架express</span><br><span class="line">const express = require(<span class="string">'express'</span>);</span><br><span class="line">//node的内置模块</span><br><span class="line">const path = require(<span class="string">'path'</span>);</span><br><span class="line">//解析请求发送过来的数据</span><br><span class="line"><span class="built_in">let</span> bodyParser = require(<span class="string">'body-parser'</span>);</span><br><span class="line">//开启一个服务</span><br><span class="line"><span class="built_in">let</span> app = express();</span><br><span class="line">// 引入模板</span><br><span class="line"><span class="built_in">let</span> ejs = require(<span class="string">'ejs'</span>);</span><br><span class="line">// 设置模板引擎 可以使用html为模板</span><br><span class="line">app.engine(<span class="string">'.html'</span>,ejs.__express);</span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'html'</span>);</span><br><span class="line">//设置模板文件存放的路径</span><br><span class="line">app.set(<span class="string">'views'</span>,<span class="string">'views'</span>);</span><br><span class="line">// 解析请求过来的参数 要在路由解析之前注册 req.body这个只针对post请求的，如果是get请求使用req.query</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">// 引入路由模块</span><br><span class="line"><span class="built_in">let</span> indexRouter = require(<span class="string">'./router/indexRouter.js'</span>);</span><br><span class="line">//注册路由模块</span><br><span class="line">app.use(indexRouter);</span><br><span class="line">// 挂载静态资源 静态资源可以挂载多个</span><br><span class="line">app.use(<span class="string">'/node_modules'</span>, express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(path.join(__dirname, <span class="string">'static'</span>)));</span><br><span class="line">//监听端口</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">'node Server Running at http://127.0.0.1:3000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="router文件夹"><a href="#router文件夹" class="headerlink" title="router文件夹"></a>router文件夹</h3><ul><li>router可以放多个路由模块针对不同的模块</li><li>router.js 主要负责路由的分发<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//主要使用express的路由模块</span><br><span class="line">const express = require(<span class="string">'express'</span>);</span><br><span class="line">//路由生成</span><br><span class="line"><span class="built_in">let</span> router = express.Router();</span><br><span class="line">// 业务逻辑模块</span><br><span class="line"><span class="built_in">let</span> indexController = require(<span class="string">'../controller/indexController.js'</span>)</span><br><span class="line">//路由模块支持链式调用 后面用的是回调是一个命名函数</span><br><span class="line">router.get(<span class="string">'/'</span>,indexController.showIndexPage)</span><br><span class="line">    </span><br><span class="line">    .get(<span class="string">'/home'</span>,indexController.showHomePage)</span><br><span class="line">    .post(<span class="string">'/user'</span>,indexController.showUsers)</span><br><span class="line">//最后导出这个模块供app.js使用，module.exports 是node的模块化</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></li></ul><h3 id="controller文件夹"><a href="#controller文件夹" class="headerlink" title="controller文件夹"></a>controller文件夹</h3><ul><li>controller文件夹主要放业务逻辑的，也可以分模块放多个模块</li><li>以indexController为列：indexController.js 接上面的业务模块<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//引入的数据模块</span><br><span class="line"><span class="built_in">let</span> indexModel = require(<span class="string">'../model/indexModel.js'</span>);</span><br><span class="line">//导出的各个模块</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //渲染首页的</span><br><span class="line">    showIndexPage(req,res)&#123;</span><br><span class="line">        //获取请求的参数</span><br><span class="line">        <span class="built_in">let</span> params = req.query;</span><br><span class="line">        console.log(<span class="string">'params :'</span>, params);</span><br><span class="line">        indexModel.getAllUsers((err,results)=&gt;&#123;</span><br><span class="line">            //处理错误的</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="built_in">return</span> res.render(<span class="string">'index'</span>,&#123;title:<span class="string">'首页'</span>,userList:[&#123;name:<span class="string">'暂时没有数据'</span>&#125;]&#125;)</span><br><span class="line">            //渲染函数，express已经封装好了</span><br><span class="line">            res.render(<span class="string">'index'</span>,&#123;title:<span class="string">'首页'</span>,userList:results&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    &#125;,</span><br><span class="line">    showHomePage(req,res)&#123;</span><br><span class="line">        <span class="built_in">let</span> params = req.query;</span><br><span class="line">        console.log(<span class="string">'home-get:'</span>, params);</span><br><span class="line">        // console.log(<span class="string">'req :'</span>, req);</span><br><span class="line">        res.render(<span class="string">'home'</span>,&#123;title:<span class="string">'home'</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    showUsers(req,res)&#123;</span><br><span class="line">        //解析客户端发送的数据的，也就是body-parser，数据会挂载在req.body上</span><br><span class="line">        <span class="built_in">let</span> params = req.body;</span><br><span class="line">        console.log(<span class="string">'user-post:'</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="model文件夹"><a href="#model文件夹" class="headerlink" title="model文件夹"></a>model文件夹</h3><ul><li>存放和数据库交互的模块数据的存取，更新，增加等</li><li>一般我们会抽离成一个基本的配置文件和不同模块的数据</li><li><p>baseDB.js 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//引入mysql模块，这里使用mysql</span><br><span class="line">var mysql = require(<span class="string">'mysql'</span>)</span><br><span class="line">//创建一个mysql连接，</span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">host     : <span class="string">'localhost'</span>,//使用本地数据库</span><br><span class="line">user     : <span class="string">'root'</span>,//数据库的用户名</span><br><span class="line">password : <span class="string">'root'</span>,//数据库的密码</span><br><span class="line">database : <span class="string">'users'</span>,//数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line">//连接</span><br><span class="line">connection.connect()</span><br><span class="line">//导出</span><br><span class="line">module.exports = connection;</span><br></pre></td></tr></table></figure></li><li><p>indexModel.js 数据交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//引入配置文件创立数据库连接</span><br><span class="line"><span class="built_in">let</span> connection = require(<span class="string">'./baseDB'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    getAllUsers(callback)&#123;</span><br><span class="line">        //mysql的操作语句，后面单独写</span><br><span class="line">        <span class="built_in">let</span> sqlStr = <span class="string">'select * from users'</span>;</span><br><span class="line">        //根据语句查询，这里如果是更新或者其他数据操作，需要业务模块传数据过来</span><br><span class="line">        connection.query(sqlStr,(err,result)=&gt;&#123;</span><br><span class="line">            // console.log(result);</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="built_in">return</span> callback(err);</span><br><span class="line">            callback(null,result)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>上面的整个过程和之前写过的node(基础) 封装过程差不多，主要是express已经封装好了可以直接拿来用<ul><li>app.js–&gt;router.js–&gt;controller–&gt;model–&gt;controller–&gt;客户端</li></ul></li><li>说一下如果是自己写写东西用的工具<ul><li>数据库mysql  <strong>phpstudy</strong> 这个工具挺好用的   <strong>navicat premium</strong> 这个是数据库可视化工具，可以操作数据库</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;node-ejs-express-的使用&quot;&gt;&lt;a href=&quot;#node-ejs-express-的使用&quot; class=&quot;headerlink&quot; title=&quot;node + ejs + express 的使用&quot;&gt;&lt;/a&gt;node + ejs + express 的
      
    
    </summary>
    
      <category term="node" scheme="https://zq562895852.github.io/categories/node/"/>
    
    
      <category term="node学习笔记" scheme="https://zq562895852.github.io/tags/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>node学习(基础)</title>
    <link href="https://zq562895852.github.io/2019/01/12/nodestudynotes/nodebasis/"/>
    <id>https://zq562895852.github.io/2019/01/12/nodestudynotes/nodebasis/</id>
    <published>2019-01-12T02:15:16.000Z</published>
    <updated>2019-03-19T03:54:53.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node基础"><a href="#node基础" class="headerlink" title="node基础"></a>node基础</h2><ul><li>Node.js 基于 Chrome V8 引擎的 javascript 运行环境<ul><li>我们使用的js写的是node代码，只是单纯的字符串，</li><li>如果想要解析这些js代码，必须有一个解析执行环境，这个环境就是chrome的v8引擎</li></ul></li></ul><ul><li>Node.js 的包管理器 npm,是全球最大的开源库生态系统<ul><li>先使用<code>npm init -y</code>初始化包管理文件<code>package.json</code>,将所有安装的包都记录到这个文件中。</li></ul></li></ul><ul><li>在Node中执行js的两种方式<ol><li>直接输入<code>node</code>，进入Node的<code>REPL</code>运行环境<ul><li>R:Read:读取用户输入的字符串内容</li><li>E:Evaluate:把用户输入的字符串，当作JS代码解析执行，</li><li>P:Print:打印输出Evaluate解析的结果</li><li>L:Loop:进入下一次循环</li></ul></li><li>将代码写在js文件中，使用node指定文件名运行。</li></ol></li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li><p>如果不指定读取的编码格式，默认data就是一个二进制的Buffer对象(读取文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> fs = require(<span class="string">'fs'</span>);</span><br><span class="line">   fs.readFile(<span class="string">'./demo/1.txt'</span>,<span class="string">'utf-8'</span>,(err,data)=&gt;&#123;</span><br><span class="line">       <span class="keyword">if</span>(err) throw err;</span><br><span class="line">       console.log(data);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li><li><p>写入文件不用指定编码，默认就是utf-8,后写入的会把之前的覆盖，如果指定的路径不存在则先创建这个文件，如果文件已存在则直接覆盖这个文件;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">'./demo/2.txt'</span>,<span class="string">'这是写入的内容'</span>,err=&gt;&#123;</span><br><span class="line"> // 写入文件，如果写入成功err是null,否则是一个Error对象；</span><br><span class="line"> !err&amp;&amp;console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>直接在后面追加内容,如果追加的文件不存在会先创建这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.appendFile(<span class="string">'./demo/2.txt'</span>,<span class="string">'\n这是appendFile的内容'</span>,err=&gt;&#123;</span><br><span class="line"> // <span class="keyword">if</span>(err) throw err;</span><br><span class="line"> console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><ul><li><p>处理模块路径的</p><ul><li>一般情况下用的最多的是  path.join(path),path.resolve(path),path.basename(path),path.extname(path)</li></ul><ol><li><code>path.join()</code> 返回拼接的路径 如：<code>path.join(&#39;/static&#39;,&#39;img&#39;,&#39;..&#39;)</code> 返回’/static’,..会向上一级抵消掉img目录</li><li><code>path.resolve()</code>方法将路径或路径片段的序列解析为绝对路径。零长度的 path 片段会被忽略。如果没有传入 path 片段，则 path.resolve() 将返回当前工作目录的绝对路径。<br>path.resolve(‘/foo/bar’, ‘./baz’);<br>// 返回: ‘/foo/bar/baz’<br>path.resolve(‘/foo/bar’, ‘/tmp/file/‘);<br>// 返回: ‘/tmp/file’</li><li><code>path.basename()</code> 返回 path 的最后一部分<br>path.basename(‘/foo/bar/baz/asdf/quux.html’);<br>// 返回: ‘quux.html’<br>path.basename(‘/foo/bar/baz/asdf/quux.html’, ‘.html’);<br>// 返回: ‘quux’</li><li><p><code>path.extname()</code>返回 path 的扩展名，从最后一次出现 .（句点）字符到 path 最后一部分的字符串结束<br>path.extname(‘index.html’);<br> // 返回: ‘.html’</p><p> path.extname(‘index.coffee.md’);<br> // 返回: ‘.md’</p><p> path.extname(‘index.’);<br> // 返回: ‘.’</p><p> path.extname(‘index’);<br> // 返回: ‘’</p><p> path.extname(‘.index’);<br> // 返回: ‘’</p></li></ol></li></ul><h3 id="http-接下来详细说一下封装的过程"><a href="#http-接下来详细说一下封装的过程" class="headerlink" title="http (接下来详细说一下封装的过程)"></a>http (接下来详细说一下封装的过程)</h3><ul><li>使用http模块创建一个服务器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//引入http模块</span><br><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const app = http.createServer((req,res)=&gt;&#123;</span><br><span class="line">    res.writeHead(200, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html; charset = utf-8'</span>&#125;)</span><br><span class="line">    //如果不设置中文会乱码 </span><br><span class="line">     res.end(<span class="string">'test页面'</span>)</span><br><span class="line">&#125;).listen(3000)</span><br><span class="line"><span class="comment"># 这样一个简单的服务器就创建好了，但是要想做一个网站应用，这是远远不够的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li>请求地址，也就是我们的请求路由，这个可以在req,请求体身上拿到<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由http的服务器说起</span></span><br><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment"># 引入路由模块</span></span><br><span class="line">const router = require(<span class="string">'./router.js'</span>);</span><br><span class="line">const app = http.createServer((req,res)=&gt;&#123;</span><br><span class="line">   //我们可以看一下这个请求的路径 下图中可以看到挂载的数据有很多，我只截取我们用到的</span><br><span class="line">   <span class="comment"># 这样我们就可以看到请求的路径和请求的方法了，这时候我们可以创建一个路由模块，然后把req,res传递过去</span></span><br><span class="line">   这里的req，res贯穿整个应用，可以说是一条线把整个应用连接起来--&gt; 建立router.js</span><br><span class="line">   router.getRoute(req,res)</span><br><span class="line">   //res.writeHead(200, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html; charset = utf-8'</span>&#125;)</span><br><span class="line">   //res.end(<span class="string">'test'</span>)</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2019/01/12/nodestudynotes/nodebasis/req.png" alt="req挂载的数据"></p><h3 id="router-js-接上面路由模块"><a href="#router-js-接上面路由模块" class="headerlink" title="router.js(接上面路由模块)"></a>router.js(接上面路由模块)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> module.exports=&#123;</span><br><span class="line">   getRoute(req,res)&#123;</span><br><span class="line">       console.log(req.url);</span><br><span class="line">       const url = req.url;</span><br><span class="line">       res.writeHead(200, &#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html;charset=utf-8'</span>&#125;)</span><br><span class="line">       <span class="keyword">if</span>(url===<span class="string">'/'</span>)&#123;</span><br><span class="line">           </span><br><span class="line">           res.end(<span class="string">'首页'</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           res.end(404)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">这样一个简单的路由就实现了</span><br><span class="line">思路：创建一个服务，我们不能把所有的代码都放到server中，这样的话sever中比较杂乱不好维护</span><br><span class="line">既然node是服务端的，我们就借鉴服务端的思想分离router模块形成一个单独的模块更加容易维护</span><br><span class="line">httpServer--&gt;router 调用router中的方法就可，下面我们继续抽离业务逻辑模块</span><br></pre></td></tr></table></figure><h3 id="controller-业务逻辑"><a href="#controller-业务逻辑" class="headerlink" title="controller(业务逻辑)"></a>controller(业务逻辑)</h3><ul><li><p>先说一下后台的思想MVC，M–&gt;(model) 数据层只提供数据怎么使用不管，这样可以保证模块功能单一，只提供数据，一般情况下是mysql,monogodb等获取相关的数据，数据操作，V–&gt;view 页面层也就是我们常说的视图，C–&gt;(controller)也就是我们的业务逻辑层，负责调用model模块获取数据</p><ul><li><p>创建我们的controller.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> module.exports = &#123;</span><br><span class="line">   showIndexPage(req,res)&#123;</span><br><span class="line">      res.end(<span class="string">'首页'</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">//这个模块中我们只写业务逻辑，比如我们渲染页面，返回页面和数据，数据的二次封装等</span><br></pre></td></tr></table></figure></li><li><p>router.js中引入controller.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 引入controller.js</span><br><span class="line">   let controller = require(&apos;./controller&apos;);</span><br><span class="line">   module.exports=&#123;</span><br><span class="line">      getRoute(req,res)&#123;</span><br><span class="line">         console.log(req.url);</span><br><span class="line">         const url = req.url;</span><br><span class="line">         res.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html;charset=utf-8&apos;&#125;)</span><br><span class="line">         if(url===&apos;/&apos;)&#123;</span><br><span class="line">               controller.showIndexPage(req,res)</span><br><span class="line">               // res.end(&apos;首页&apos;)</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">               res.end(404)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="model层"><a href="#model层" class="headerlink" title="model层"></a>model层</h3><ul><li><p>model是负责数据的，一般是和数据库打交道，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> var mysql = require(<span class="string">'mysql'</span>)</span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">host     : <span class="string">'localhost'</span>,</span><br><span class="line">user     : <span class="string">'root'</span>,</span><br><span class="line">password : <span class="string">'root'</span>,</span><br><span class="line">database : <span class="string">'users'</span></span><br><span class="line">&#125;);</span><br><span class="line">connection.connect();</span><br><span class="line">//一般情况下我们会把上面的配置内容抽离成一个独立的文件，这样方便改配置</span><br><span class="line"> module.exports = &#123;</span><br><span class="line"> getAllData(callback)&#123;</span><br><span class="line">      <span class="built_in">let</span> sqlStr = <span class="string">'select * from users'</span>;</span><br><span class="line">      connection.query(sqlStr,(err,result)=&gt;&#123;</span><br><span class="line">            // console.log(result);</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="built_in">return</span> callback(err);</span><br><span class="line">            callback(null,result)</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">//在controller.js中引入这个模块直接调用方法即可</span><br></pre></td></tr></table></figure><p>###</p></li><li>总结：抽离的思路就是MVC思想，各个单一的模块负责各自的功能，更易维护<ul><li>整体的过程：app(server)–&gt;router(路由分发)–&gt;controller(业务逻辑)–&gt;model(数据相关)<br>这个过程中controller负责向客户端发送页面和数据渲染<br>大致的过程就是这样，框架中封装的思想基本上也是这样，只不过细节到位。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;node基础&quot;&gt;&lt;a href=&quot;#node基础&quot; class=&quot;headerlink&quot; title=&quot;node基础&quot;&gt;&lt;/a&gt;node基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js 基于 Chrome V8 引擎的 javascript 运行环境&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="node" scheme="https://zq562895852.github.io/categories/node/"/>
    
    
      <category term="node学习笔记" scheme="https://zq562895852.github.io/tags/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>angular(进阶)</title>
    <link href="https://zq562895852.github.io/2018/12/21/service/"/>
    <id>https://zq562895852.github.io/2018/12/21/service/</id>
    <published>2018-12-21T02:15:16.000Z</published>
    <updated>2019-03-20T07:37:58.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ul><li><p>命令行创建<code>ng g s 服务名称</code> 此命令可以创建一个服务，名称前可以加文件夹路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line">@Injectable(&#123;</span><br><span class="line">providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">export</span> class HeroService &#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span></span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Injectable 这个服务类添加了 @Injectable() 装饰器</p></li><li>为什么要有服务<ul><li>官方说是：组件不应该直接获取或保存数据，它们不应该了解是否在展示假数据。 它们应该聚焦于展示数据，而把数据访问的职责委托给某个服务。</li></ul></li><li>必须先把服务提供给依赖注入系统<ul><li>依赖注入(DI)是一种应用设计模式，使用@Injectable()装饰器标记模块，以表明这是一个可注入的模块为组件提供数据</li><li>其实依赖注入只做了两件事 初始化被依赖项(引入)，注入到依赖模块中，其实我们经常用的<code>import module from &#39;module&#39;;vue.use(module)</code>、这就是一个依赖注入的实例</li></ul></li><li>新建一个服务，引入服务，在组件的构造器constructor函数中注入服务，利用服务获取数据等，这样是组件和数据解耦，有更高的复用性和维护性</li></ul><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><ul><li><p>httpClient 是http的升级版，要使用httpClient要导入HttpClientModule,这个模块在<code>@angular/common/http</code>,在根模块导入，然后在组件中可以注入使用，一般封装之后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line">import &#123; HttpClient, HttpParams &#125; from <span class="string">'@angular/common/http'</span>;</span><br><span class="line">/*设置请求的基地址，方便替换*/</span><br><span class="line">const baseurl = <span class="string">'/api'</span>;//启用代理服务</span><br><span class="line">@Injectable(&#123;</span><br><span class="line">providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">export</span> class HttpService &#123;</span><br><span class="line">public restServer;</span><br><span class="line">// public http;</span><br><span class="line">constructor(private Http:HttpClient) &#123; </span><br><span class="line">    // this.http = Http;</span><br><span class="line">    this.restServer = baseurl;</span><br><span class="line">&#125;</span><br><span class="line">public get(url, params?: Object, cb?: Function,options?: Object) &#123;</span><br><span class="line">    <span class="built_in">let</span> httpParams = new HttpParams();</span><br><span class="line">    const vm = this;</span><br><span class="line">    <span class="keyword">if</span> (params) &#123;</span><br><span class="line">    <span class="keyword">for</span> (const key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (params[key] === <span class="literal">false</span> || params[key]) &#123;</span><br><span class="line">        httpParams = httpParams.set(key, params[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.Http.get(this.restServer + url, &#123;params: httpParams&#125;)</span><br><span class="line">    .subscribe(data =&gt; &#123;</span><br><span class="line">        cb(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">public post(url, data?: Object, cb?: Function, options?: Object) &#123;</span><br><span class="line">    const vm = this;</span><br><span class="line">    this.Http.post(this.restServer + url, data, options)</span><br><span class="line">    .subscribe(res =&gt; &#123;</span><br><span class="line">        cb(res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">public put(url, data?: Object, cb?: Function, options?: Object) &#123;</span><br><span class="line">    const vm = this;</span><br><span class="line">    this.Http.put(this.restServer + url, data, options)</span><br><span class="line">    .subscribe(res =&gt; &#123;</span><br><span class="line">        cb(res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面只是一个初步封装的例子，当然还有其它更多的封装情况，切记在app.module.ts中引入httpClientModule模块</p></li><li>http模块有许多设置，包括设置请求头，拦截请求和响应，取消请求，监听进度事件<h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3></li><li>ngOnChanges()输入属性发生变化时触发，</li><li>ngOnInit()初始化调用</li><li>ngDoCheck()变更检测</li><li>ngAfterContentInit()视图渲染完毕触发( Angular 把外部内容投影进组件/指令的视图之后调用)</li><li>ngAfterContentChecked() 组件变更检测之后触发</li><li>ngAfterViewInit()初始化完成之后(组件视图及其子视图)调用</li><li>ngAfterViewChecked()组件视图及其子视图变更检测之后调用，ngAterContentChecked()之后</li><li>ngOnDestory()组件销毁之前调用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;命令行创建&lt;code&gt;ng g s 服务名称&lt;/code&gt; 此命令可以创建一个服务，名称前可以加文件夹路径&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
      <category term="angular" scheme="https://zq562895852.github.io/categories/angular/"/>
    
    
      <category term="angular服务、依赖注入、http、生命周期钩子函数" scheme="https://zq562895852.github.io/tags/angular%E6%9C%8D%E5%8A%A1%E3%80%81%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E3%80%81http%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>angular(基础篇-表单)</title>
    <link href="https://zq562895852.github.io/2018/11/24/forms/"/>
    <id>https://zq562895852.github.io/2018/11/24/forms/</id>
    <published>2018-11-24T03:35:27.000Z</published>
    <updated>2018-11-26T11:25:50.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angular表单"><a href="#angular表单" class="headerlink" title="angular表单"></a>angular表单</h3><hr><p>  注意:看到很多模板变量报错的，form表单的模块一定要引入正确，在app.module模块引入并不等于全局模式，所以在引入组件的地方一定引入表单的模块,我是在路由模块引入的，因为我的组件多数都在路由文件中；记得不要放在app.module哪个组件需要form模块，就在引入组件的地方引入下面的模块，最后在元数据中imports<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; FormsModule,ReactiveFormsModule &#125; from <span class="string">'@angular/forms'</span>;</span><br></pre></td></tr></table></figure></p><hr><ol><li><p>模板驱动表单(FormsModule)<br>angular封装了处理了表单，这里form和原生的不太一样,表单是经过处理的，不会刷新页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="comment">#myForm='ngForm' (ngSubmit)="onSubmit(myForm.value)"   novalidate &gt;</span></span><br><span class="line"><span class="string">'这里的模板变量必须是ngForm，表单的内容会以对象的形式挂载在模板变量的value上'</span></span><br><span class="line">   &lt;div class=<span class="string">"form-content"</span>&gt;</span><br><span class="line">     &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">       用户名&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> ngModel name=<span class="string">'username'</span> id=<span class="string">"username"</span>  </span><br><span class="line">       //<span class="string">'使用ngModel双向绑定数据，必须要有name属性，这个也是挂载模板变量身上的属性名'</span></span><br><span class="line">       class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span> required </span><br><span class="line">        placeholder=<span class="string">"username"</span> <span class="comment">#username="ngModel"&gt; '这里的模板变量可以作为提示的判断'</span></span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;div [hidden]=<span class="string">"username.valid || username.pristine"</span> //<span class="string">'这个是根据模板变量#username="ngModel" 拿到的值 可作为提示用'</span></span><br><span class="line">           class=<span class="string">"alert alert-danger"</span>&gt;</span><br><span class="line">         username is required</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">       手机号&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"mobeil"</span> ngModel name=<span class="string">'phone'</span> </span><br><span class="line">        class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span>  </span><br><span class="line">        placeholder=<span class="string">"Password"</span> &gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;div ngModelGroup=<span class="string">"passwordGroup"</span>&gt;// <span class="string">'ngModelGroup是用来分组的，可以把多个分成一组放在myForm.value对象的一个属性上'</span></span><br><span class="line">       &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">         密码&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> id=<span class="string">"password"</span> ngModel name=<span class="string">'password'</span></span><br><span class="line">           class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span> </span><br><span class="line">            placeholder=<span class="string">"Password"</span> &gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">         确认密码&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> id=<span class="string">"cpassword"</span> ngModel name=<span class="string">'confimp'</span> </span><br><span class="line">          class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span>  </span><br><span class="line">          placeholder=<span class="string">"Password"</span> &gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> class=<span class="string">"btn rounded-btn"</span> &gt;Log <span class="keyword">in</span>&lt;/button&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>对象的形式<br><img src="/2018/11/24/forms/temForm.jpg" alt="form的数据形式"><br>模板表单有三个主要的指令 表单的变量 #myForm=’ngForm’ ngForm不可变， ngModel 双向数据绑定，记得name属性<br>ngModelGroup=”passwordGroup” 这个分组用，个人感觉用处不大。</p></li><li><p>响应式表单(ReactiveFormsModule)<br>demo-template中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;form [formGroup]=<span class="string">"myform"</span> (ngSubmit)=<span class="string">"onSubmit()"</span>&gt;<span class="string">'视图和myform关联'</span></span><br><span class="line">      &lt;div class=<span class="string">"form-content"</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">          用户名&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> formControlName=<span class="string">"username"</span>  id=<span class="string">"username"</span>  class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span> required  placeholder=<span class="string">"Username"</span> &gt; <span class="string">'使用formControlName绑定字段'</span></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">          手机号&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"mobeil"</span> formControlName=<span class="string">'phone'</span>  class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span>  placeholder=<span class="string">"Password"</span> &gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">"form-group"</span> formArrayName=<span class="string">'emails'</span>&gt; <span class="string">'使用formArrayName分组数据'</span></span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li *ngFor=<span class="string">"let email of myform.get('emails').controls; let i=index"</span>&gt;<span class="string">'获取数组数据并循环'</span></span><br><span class="line">              邮箱-&#123;&#123;i+1&#125;&#125; &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> [formControlName]=<span class="string">'i'</span>  &gt; &lt;/li&gt; <span class="string">'利用索引绑定数据，记得用[],不知道为什么一会要用[]其他又不用，不得不吐槽一下这个坑爹的angular！！！'</span></span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">          &lt;button (click)=<span class="string">"addEmail()"</span>&gt;add&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">          &lt;div formGroupName=<span class="string">'confirm'</span>&gt;<span class="string">'分组'</span></span><br><span class="line">            &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">              密码&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> id=<span class="string">"password"</span> formControlName=<span class="string">'password'</span>  class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span>  placeholder=<span class="string">"Password"</span> &gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=<span class="string">"form-group"</span> &gt;</span><br><span class="line">              确认密码&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> id=<span class="string">"cpassword"</span> formControlName=<span class="string">'confimp'</span>  class=<span class="string">"form-control input-underline input-lg"</span>  minlength=<span class="string">"4"</span>  placeholder=<span class="string">"Password"</span> &gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span> class=<span class="string">"btn rounded-btn"</span> &gt;Log <span class="keyword">in</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"> &lt;/form&gt;</span><br></pre></td></tr></table></figure><p>组件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. import &#123;FormBuilder, FormControl, FormGroup, FormArray,Validators&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line">   <span class="string">'引入'</span></span><br><span class="line">2. public myform = new FormGroup(&#123;</span><br><span class="line">             username: new FormControl(),</span><br><span class="line">             phone: new FormControl(),</span><br><span class="line">             confirm:new FormGroup(&#123;</span><br><span class="line">             password: new FormControl(),</span><br><span class="line">             confimp: new FormControl(),</span><br><span class="line">             &#125;),</span><br><span class="line">             emails:new FormArray([</span><br><span class="line">             new FormControl(),</span><br><span class="line">             ])</span><br><span class="line">         &#125;);</span><br><span class="line">     <span class="string">'声明'</span></span><br><span class="line">3. <span class="function"><span class="title">onSubmit</span></span>()&#123;</span><br><span class="line">     console.log(this.myform.value);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="string">'数据挂载this.myform.value，是对象形式'</span></span><br><span class="line">4. <span class="function"><span class="title">addEmail</span></span>()&#123;</span><br><span class="line">     <span class="built_in">let</span> emails = this.myform.get(<span class="string">'emails'</span>) as FormArray;</span><br><span class="line">     emails.push(new FormControl())</span><br><span class="line">   &#125;  </span><br><span class="line">  <span class="string">'这个感觉也是蛮坑的，获取emails数据不能直接取，要用这种方式！！！'</span></span><br></pre></td></tr></table></figure></li></ol><hr><p>  还有很多内容，包括表单校验，FormBuilder服务，校验的内置方法规则，以及自定义校验规则，<br>  但整体感觉相当繁琐，一点都不实用，这里就不做过多介绍，可以去官方文档研究！<br>  吐槽一下官方文档：文档内容不是很清晰，坑很多，试错成本较大，而且没有常见问题的说明，个人觉得文档很糟糕！！！</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angular表单&quot;&gt;&lt;a href=&quot;#angular表单&quot; class=&quot;headerlink&quot; title=&quot;angular表单&quot;&gt;&lt;/a&gt;angular表单&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;  注意:看到很多模板变量报错的，form表单的模块一定要引入正确，在ap
      
    
    </summary>
    
      <category term="angular" scheme="https://zq562895852.github.io/categories/angular/"/>
    
    
      <category term="表单" scheme="https://zq562895852.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>angular(基础篇-路由)</title>
    <link href="https://zq562895852.github.io/2018/11/22/basis-route/"/>
    <id>https://zq562895852.github.io/2018/11/22/basis-route/</id>
    <published>2018-11-22T02:15:16.000Z</published>
    <updated>2018-11-24T03:45:41.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=<span class="string">"/"</span>&gt; <span class="string">'在index.html的 &lt;head&gt; 标签下先添加一个 &lt;base&gt; 元素，来告诉路由器该如何合成导航用的 URL。'</span></span><br><span class="line"></span><br><span class="line">import &#123; RouterModule, Routes &#125; from <span class="string">'@angular/router'</span>;<span class="string">'导入router相关模块'</span></span><br><span class="line"></span><br><span class="line">const appRoutes: Routes = [</span><br><span class="line"> &#123; path: <span class="string">'hero/:id'</span>,component: HeroDetailComponent </span><br><span class="line">   children:[</span><br><span class="line">       &#123;</span><br><span class="line">         path:<span class="string">''</span>,</span><br><span class="line">         component: component,</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         path: <span class="string">'details/:id'</span>,</span><br><span class="line">         component: component,</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;,<span class="string">'可以用路由传值形如  hero/789'</span></span><br><span class="line"> &#123; path: <span class="string">'heroes'</span>,component: HeroListComponent,data: &#123; title:      <span class="string">'Heroes List'</span> &#125; <span class="string">'data属性存储数据的，'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123; path: <span class="string">''</span>,<span class="string">'根路径'</span></span><br><span class="line">     redirectTo: <span class="string">'/heroes'</span>,</span><br><span class="line">     pathMatch: <span class="string">'full'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123; path: <span class="string">'**'</span>, component: PageNotFoundComponent &#125;<span class="string">'404路由没匹配上'</span></span><br><span class="line"> ];<span class="string">'路由不能有 / 开头'</span></span><br><span class="line"> &lt;router-outlet&gt;&lt;/router-outlet&gt; <span class="string">'路由器出口'</span></span><br><span class="line"> <span class="string">'说明:如果有子路由跳转要用 ./ 表示子路由'</span> &lt;el-button [routerLink]=<span class="string">"['./details',id]"</span>  routerLinkActive=<span class="string">"active"</span> <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"small"</span>&gt;详情&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h3 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.  &lt;a routerLink=<span class="string">"/heroes"</span> routerLinkActive=<span class="string">"active"</span>&gt;Heroes&lt;/a&gt; <span class="string">'这种静态路由不需要传值的'</span></span><br><span class="line">2. &lt;el-button [routerLink]=<span class="string">"['/singerDetail']"</span> [queryParams]=<span class="string">"&#123;id:id&#125;"</span> routerLinkActive=<span class="string">"active"</span> </span><br><span class="line">   <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"small"</span> (click)=<span class="string">"handle(scope,2)"</span>&gt;详情&lt;/el-button&gt;</span><br><span class="line">   <span class="string">'url路径 /singerDetail?id=xxxxxx'</span></span><br><span class="line">this.singerId = this.routerInfo.snapshot.queryParams[<span class="string">'id'</span>];<span class="string">'组件中取值'</span></span><br><span class="line">3. &lt;el-button [routerLink]=<span class="string">"['/singerDetail',id]"</span>  routerLinkActive=<span class="string">"active"</span> <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"small"</span>&gt;详情&lt;/el-button&gt;</span><br><span class="line"> <span class="string">'url路径: /singerDetail/xxxxx;注意:这种情况路由中路径设置必须 singerDetail/:id  否则无法匹配无法跳转'</span></span><br><span class="line"> this.singerId = this.routerInfo.snapshot.params[<span class="string">'id'</span>];<span class="string">'组件中取值'</span></span><br><span class="line"> <span class="string">'以上是在模板中绑定跳转'</span></span><br><span class="line"></span><br><span class="line">4. this.router.navigate([<span class="string">'/singerDetail'</span>],&#123;queryParams:&#123; id: this.id &#125;&#125;); <span class="string">'js跳转，和2效果相同组件中取值也是一样'</span></span><br><span class="line">   this.router.navigate([<span class="string">'/singerDetail'</span>,this.id]);<span class="string">'这个和3效果相同，路由配置也必须一样'</span></span><br><span class="line"> <span class="string">'说明: snapshot快照模式，假如你很确定这个组件的实例永远、永远不会被复用，那就可以使用快照，</span></span><br><span class="line"><span class="string">   但是：假如在同一个组件有两个按钮都是去到商品详情点击了第一个按钮并且这个组件没有销毁的情况</span></span><br><span class="line"><span class="string">   下再点击第二个该按钮不会重新创建这个组件的实例的情况下，只是数据传递的不同，这种情况下要使</span></span><br><span class="line"><span class="string">   用订阅模式(subscribe)'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'以下是两种订阅模式'</span></span><br><span class="line">this.routerInfo.queryParams.subscribe((params:ParamMap)=&gt;&#123;</span><br><span class="line">   this.singerId = params[<span class="string">"id"</span>]</span><br><span class="line"> &#125;)<span class="string">'这个对应  /singerDetail?id=xxxxxx'</span></span><br><span class="line"></span><br><span class="line"> this.routerInfo.params.subscribe((params:ParamMap)=&gt;&#123;</span><br><span class="line">   this.singerId = params[<span class="string">"id"</span>]</span><br><span class="line"> &#125;) <span class="string">'这个对应  /singerDetail/xxxxxx'</span></span><br><span class="line"> <span class="string">'这两个必须对应，否则取不到传的参数'</span></span><br></pre></td></tr></table></figure><h3 id="路由守卫-生命周期钩子"><a href="#路由守卫-生命周期钩子" class="headerlink" title="路由守卫(生命周期钩子)"></a>路由守卫(生命周期钩子)</h3><ol><li><p>CanActivate: 处理导航到某个路由的情况（进入路由时触发事件）；</p></li><li><p>CanDeactivate: 处理从当前路由离开时的情况（离开当前路由时触发事件）;</p></li><li><p>Resolve: 在路由激活之前获取路由数据（预加载数据）；</p></li></ol><p>以下为例<br>CanActivate<br>守卫文件  guard.ts 如下图<br><img src="/2018/11/22/basis-route/route.guard.jpg" alt="main文件主要信息"></p><p>路由文件<br><img src="/2018/11/22/basis-route/yinru.jpg" alt="app.route.module"></p><p>使用<br><img src="/2018/11/22/basis-route/use.jpg" alt="app.route.module"></p><p>最后一定要在路由文件中实例化路由守卫<br><img src="/2018/11/22/basis-route/shili.jpg" alt="app.route.module"></p><p>CanDeactivate 和上面基本相同不再介绍</p><p>Resolve<br>例如：查看商品详情时，预先根据该商品id查询返回数据；防止进入商品组件时获取数据延迟而出现页面空白的情况</p><p><img src="/2018/11/22/basis-route/product.jpg" alt="app.route.module"></p><p><img src="/2018/11/22/basis-route/resolve.jpg" alt="app.route.module"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve:&#123; //resolve是一个对象， 用法都一样</span><br><span class="line">     product : ProductResolve   //想传入product,product由ProductResolve生成</span><br><span class="line">&#125;&#125;,<span class="string">'在app.route.module路由文件中使用，最后记得实例化 ProductResolve'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h2&gt;&lt;h3 id=&quot;路由配置&quot;&gt;&lt;a href=&quot;#路由配置&quot; class=&quot;headerlink&quot; title=&quot;路由配置&quot;&gt;&lt;/a&gt;路由配置&lt;/h
      
    
    </summary>
    
      <category term="angular" scheme="https://zq562895852.github.io/categories/angular/"/>
    
    
      <category term="angular路由" scheme="https://zq562895852.github.io/tags/angular%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>angular(基础篇-内置模块以及语法)</title>
    <link href="https://zq562895852.github.io/2018/11/21/basis/"/>
    <id>https://zq562895852.github.io/2018/11/21/basis/</id>
    <published>2018-11-21T02:15:16.000Z</published>
    <updated>2018-11-24T02:51:06.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从app-module-ts说起"><a href="#从app-module-ts说起" class="headerlink" title="从app.module.ts说起"></a>从app.module.ts说起</h2><p><img src="/2018/11/21/basis/app.module.jpg" alt="生成的目录结构"></p><h3 id="NgModules模块"><a href="#NgModules模块" class="headerlink" title="NgModules模块"></a>NgModules模块</h3><hr><p>NgModule 是一些带有 @NgModule 装饰器的类。@NgModule 装饰器的 imports 数组会告诉 Angular 哪些其它的 NgModule 是当前模块  所需的，一般都是在imports数组中放置一些内置模块以及服务。</p><hr><h3 id="CommonModule模块"><a href="#CommonModule模块" class="headerlink" title="CommonModule模块"></a>CommonModule模块</h3><hr><p>CommonModule 导出所有基本的 Angular 指令和管道  NgIf(判断)、NgForOf(循环，也可用NgFor)、NgClass(添加删除css类)、NgStyle(修改样式)、NgSwitch(和NgIf类似) 等指令(还有更多)，以及一些 CurrencyPipe(数字转金额),DatePipe(日期格式化),DecimalPipe(数字转字符串) 等管道。</p><hr><h3 id="FormsModule-ReactiveFormsModule模块"><a href="#FormsModule-ReactiveFormsModule模块" class="headerlink" title="FormsModule , ReactiveFormsModule模块"></a>FormsModule , ReactiveFormsModule模块</h3><hr><p>FormsModule 许多和表单相关的指令，后面会详细介绍，<br>ReactiveFormsModule 构建响应式表单，封装了根据规则提示的表单，后面详细介绍。</p><hr><h3 id="BrowserModule模块"><a href="#BrowserModule模块" class="headerlink" title="BrowserModule模块"></a>BrowserModule模块</h3><hr><p>BrowserModule 运行在浏览器中必须的模块</p><hr><h3 id="HttpClientModule模块"><a href="#HttpClientModule模块" class="headerlink" title="HttpClientModule模块"></a>HttpClientModule模块</h3><hr><p>HttpClientModule 和服务器通讯的模块，一般是封装在单独的文件中</p><hr><h3 id="BrowserAnimationsModule-NoopAnimationsModule模块"><a href="#BrowserAnimationsModule-NoopAnimationsModule模块" class="headerlink" title="BrowserAnimationsModule , NoopAnimationsModule模块"></a>BrowserAnimationsModule , NoopAnimationsModule模块</h3><hr><p>BrowserAnimationsModule 开启动画 NoopAnimationsModule 关闭动画</p><hr><h3 id="RouterModule模块"><a href="#RouterModule模块" class="headerlink" title="RouterModule模块"></a>RouterModule模块</h3><hr><p>RouterModule 路由相关模块</p><hr><h3 id="从最简单的说起"><a href="#从最简单的说起" class="headerlink" title="从最简单的说起"></a>从最简单的说起</h3><ol><li><p>插值表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;My current hero is &#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;img src=<span class="string">"&#123;&#123;imageUrl&#125;&#125;"</span> style=<span class="string">"height:30px"</span>&gt;</span><br><span class="line">&lt;p&gt;The sum of 1 + 1 is not &#123;&#123;1 + 1 + getVal()&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>支持简单的表达式，不支持赋值运算符，位运算，自增自减等比较复杂的</p></li><li><p>事件绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=<span class="string">"deleteHero()"</span>&gt;Delete&lt;/button&gt;</span><br><span class="line">&lt;button (click)=<span class="string">"onSave(<span class="variable">$event</span>)"</span>&gt;Save&lt;/button&gt; <span class="string">'$event事件对象'</span></span><br><span class="line">&lt;input [value]=<span class="string">"currentHero.name"</span> (input)=<span class="string">"currentHero.name=<span class="variable">$event</span>.target.value"</span> &gt;</span><br></pre></td></tr></table></figure><p>和vue差不多，其实很多框架都比较类似，当然也可以用bind-、on-、bindon-前缀绑定</p></li><li><p>数据绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="built_in">bind</span>-src=<span class="string">"imageUrl"</span>&gt;</span><br><span class="line">&lt;img [src]=<span class="string">"imageUrl"</span>&gt;  <span class="string">'属性绑定等价与上面'</span></span><br><span class="line">&lt;button [disabled]=<span class="string">"isUnchanged"</span>&gt;Save&lt;/button&gt; <span class="string">'属性绑定'</span></span><br><span class="line">&lt;div [ngClass]=<span class="string">"&#123;'special': isSpecial&#125;"</span>&gt;&lt;/div&gt; <span class="string">'类绑定不会覆盖已有的类，只会添加或删除当前类'</span></span><br><span class="line">&lt;input [(ngModel)]=<span class="string">"name"</span>&gt; <span class="string">'双向绑定，官方叫她'</span> &gt;&gt;盒子里放香蕉</span><br><span class="line">&lt;button [attr.aria-label]=<span class="string">"help"</span>&gt;<span class="built_in">help</span>&lt;/button&gt; <span class="string">'自定义属性等'</span></span><br><span class="line">&lt;div [class.special]=<span class="string">"isSpecial"</span>&gt;Special&lt;/div&gt; <span class="string">'css类名不会覆盖已有的类'</span></span><br><span class="line">&lt;button [style.color]=<span class="string">"isSpecial ? 'red' : 'green'"</span>&gt; <span class="string">'行内样式'</span></span><br><span class="line">&lt;button [style.font-size.em]=<span class="string">"isSpecial ? 3 : 1"</span> &gt;Big&lt;/button&gt;</span><br><span class="line">&lt;button [style.font-size.%]=<span class="string">"!isSpecial ? 150 : 50"</span> &gt;Small&lt;/button&gt;</span><br><span class="line">&lt;app-hero-detail [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-hero-detail&gt; <span class="string">'组件传值，方括号一定要有，否则就是字符串了'</span></span><br><span class="line">&lt;div class=<span class="string">"bad curly special"</span> [class]=<span class="string">"badCurly"</span>&gt;Bad curly&lt;/div&gt; </span><br><span class="line"><span class="string">'官方说badCurly有或无会覆盖原有的类 亲测在有[class.special]，[ngClass]同时存在的情况下不会覆盖'</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;img src=<span class="string">"&#123;&#123;heroImageUrl&#125;&#125;"</span>&gt; is the &lt;i&gt;interpolated&lt;/i&gt; image.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;img [src]=<span class="string">"heroImageUrl"</span>&gt; is the &lt;i&gt;property bound&lt;/i&gt; image.&lt;/p&gt;</span><br><span class="line"> <span class="string">'上面和下面这两种数据绑定作用相同'</span></span><br><span class="line">&lt;p&gt;&lt;span&gt;<span class="string">"&#123;&#123;title&#125;&#125;"</span> is the &lt;i&gt;interpolated&lt;/i&gt; title.&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="string">"&lt;span [innerHTML]="</span>title<span class="string">"&gt;&lt;/span&gt;"</span> is the &lt;i&gt;property bound&lt;/i&gt; title.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>模板绑定是通过 property 和事件来工作的(官方介绍的比较详细可以去看官方文档)</p></li><li><p>结构模板指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=<span class="string">"isActive"</span>&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;app-hero-detail *ngIf=<span class="string">"isActive"</span>&gt;&lt;/app-hero-detail&gt; <span class="string">'if判断，必须带*号'</span></span><br><span class="line">&lt;div *ngFor=<span class="string">"let hero of heroes"</span>&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;app-hero-detail *ngFor=<span class="string">"let hero of heroes"</span> [hero]=<span class="string">"hero"</span>&gt;&lt;/app-hero-detail&gt;<span class="string">'循环'</span></span><br><span class="line">&lt;div *ngFor=<span class="string">"let hero of heroes; let i=index"</span>&gt;&#123;&#123;i + 1&#125;&#125; - &#123;&#123;hero.name&#125;&#125;&lt;/div&gt;<span class="string">'带索引的 必须声明i否则拿不到索引'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;el-menu default-active=<span class="string">"1"</span> class=<span class="string">"el-menu-vertical-demo"</span> theme=<span class="string">"dark"</span>&gt;</span><br><span class="line">      &lt;el-submenu *ngFor=<span class="string">"let menu of menuList"</span> [title]=<span class="string">"menu.title"</span>&gt;</span><br><span class="line">        &lt;ng-container *ngIf = <span class="string">"menu.hasChildren;else menuBlock"</span>&gt;</span><br><span class="line">            &lt;el-menu-item-group   *ngFor=<span class="string">"let subMenu of menu.subs"</span> &gt;</span><br><span class="line">               &lt;el-submenu [title]=<span class="string">"subMenu.title"</span>&gt;</span><br><span class="line">                  &lt;el-menu-item *ngFor=<span class="string">"let subsMenu of subMenu.subMenu"</span> [to]=<span class="string">"subsMenu.index"</span>&gt;&#123;&#123;subsMenu.title&#125;&#125;&lt;/el-menu-item&gt;</span><br><span class="line">               &lt;/el-submenu&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">        &lt;/ng-container&gt;</span><br><span class="line">          &lt;ng-template <span class="comment">#menuBlock&gt;</span></span><br><span class="line">              &lt;el-menu-item  *ngFor=<span class="string">"let subMenu of menu.subs"</span> [to]=<span class="string">"subMenu.index"</span>&gt;&#123;&#123;subMenu.title&#125;&#125;&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/ng-template&gt;</span><br><span class="line">      &lt;/el-submenu&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line"><span class="string">'在这种循环和判断的模块中一个元素不能有多个块，上面这个例子，</span></span><br><span class="line"><span class="string">也就是不能把ngIf和ngFor放在同一个元素上否则报错，if判断的else语句使用要用#后面用else的部分'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div *ngFor=<span class="string">"let hero of heroes; trackBy: trackByHeroes"</span>&gt;</span><br><span class="line">  (&#123;&#123;hero.id&#125;&#125;) &#123;&#123;hero.name&#125;&#125;</span><br><span class="line">&lt;/div&gt; <span class="string">'trackBy有点像vue中key但是要声明才能使用'</span></span><br><span class="line"></span><br><span class="line">&lt;div [ngSwitch]=<span class="string">"currentHero.emotion"</span>&gt;</span><br><span class="line">      &lt;app-happy-hero    *ngSwitchCase=<span class="string">"'happy'"</span>    [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-happy-hero&gt;</span><br><span class="line">      &lt;app-sad-hero      *ngSwitchCase=<span class="string">"'sad'"</span>      [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-sad-hero&gt;</span><br><span class="line">      &lt;app-confused-hero *ngSwitchCase=<span class="string">"'confused'"</span> [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-confused-hero&gt;</span><br><span class="line">      &lt;app-unknown-hero  *ngSwitchDefault           [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-unknown-hero&gt;</span><br><span class="line">&lt;/div&gt; <span class="string">'ngSwitch指令和js一样的写法'</span></span><br><span class="line"></span><br><span class="line">&lt;input <span class="comment">#phone placeholder="phone number"&gt; '模板变量可以在其他位置拿到这个元素，以#或者ref声明这个变量'</span></span><br><span class="line">&lt;button (click)=<span class="string">"callPhone(phone.value)"</span>&gt;Call&lt;/button&gt;<span class="string">'模板变量作用整个模板作用域和循环let声明是不同的'</span></span><br></pre></td></tr></table></figure></li><li><p>管道操作符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;Title through uppercase pipe: &#123;&#123;title | uppercase&#125;&#125;&lt;/div&gt; <span class="string">'用法|后面跟名字即可'</span></span><br><span class="line">&lt;div&gt;Title through a pipe chain:&#123;&#123;title | uppercase | lowercase&#125;&#125;&lt;/div&gt;<span class="string">'可以有多个'</span></span><br><span class="line">&lt;div&gt;Birthdate: &#123;&#123;currentHero?.birthdate | date:<span class="string">'longDate'</span>&#125;&#125;&lt;/div&gt;<span class="string">'传值'</span></span><br><span class="line">&lt;div&gt;&#123;&#123;currentHero | json&#125;&#125;&lt;/div&gt;  <span class="string">'调试可以输出整个对象，数组'</span></span><br><span class="line">&lt;div&gt;The name is &#123;&#123;nullHero?.name&#125;&#125;&lt;/div&gt; <span class="string">'安全操作符，当对象nullHero为null时不会报错，</span></span><br><span class="line"><span class="string">这点比vue做的好，当然也可以多级像a?.b?.c?.d这样多级判断'</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  The  marker is &#123;&#123;<span class="variable">$any</span>(hero).marker&#125;&#125;</span><br><span class="line">&lt;/div&gt; <span class="string">'类型转换函数没用过暂时还不是很清楚，官方说防止类型转换错误'</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从app-module-ts说起&quot;&gt;&lt;a href=&quot;#从app-module-ts说起&quot; class=&quot;headerlink&quot; title=&quot;从app.module.ts说起&quot;&gt;&lt;/a&gt;从app.module.ts说起&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/201
      
    
    </summary>
    
      <category term="angular" scheme="https://zq562895852.github.io/categories/angular/"/>
    
    
      <category term="angular基础语法" scheme="https://zq562895852.github.io/tags/angular%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>angular(基础篇-文件信息)</title>
    <link href="https://zq562895852.github.io/2018/11/12/index/"/>
    <id>https://zq562895852.github.io/2018/11/12/index/</id>
    <published>2018-11-12T02:12:43.000Z</published>
    <updated>2018-11-24T02:49:24.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件介绍-angualr-cli生成的项目"><a href="#文件介绍-angualr-cli生成的项目" class="headerlink" title="文件介绍(angualr-cli生成的项目)"></a>文件介绍(angualr-cli生成的项目)</h2><h5 id="生成的项目最外层结构-如图-，主要都集中在src文件夹和angular-cli-json这个文件中"><a href="#生成的项目最外层结构-如图-，主要都集中在src文件夹和angular-cli-json这个文件中" class="headerlink" title="生成的项目最外层结构(如图)，主要都集中在src文件夹和angular-cli.json这个文件中"></a>生成的项目最外层结构(如图)，主要都集中在src文件夹和angular-cli.json这个文件中</h5><p><img src="/2018/11/12/index/mulv.jpg" alt="生成的目录结构"></p><h5 id="angular-cli-json的主要信息"><a href="#angular-cli-json的主要信息" class="headerlink" title="angular-cli.json的主要信息"></a>angular-cli.json的主要信息</h5><p><img src="/2018/11/12/index/cli.jpg" alt="angular-cli.json的主要信息"></p><h5 id="src目录的主要信息"><a href="#src目录的主要信息" class="headerlink" title="src目录的主要信息"></a>src目录的主要信息</h5><p><img src="/2018/11/12/index/src.jpg" alt="src目录主要信息"></p><h5 id="main-ts入口信息"><a href="#main-ts入口信息" class="headerlink" title="main.ts入口信息"></a>main.ts入口信息</h5><p><img src="/2018/11/12/index/main.jpg" alt="main文件主要信息"></p><h5 id="app目录的主要信息"><a href="#app目录的主要信息" class="headerlink" title="app目录的主要信息"></a>app目录的主要信息</h5><p><img src="/2018/11/12/index/app.jpg" alt="app目录主要信息"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件介绍-angualr-cli生成的项目&quot;&gt;&lt;a href=&quot;#文件介绍-angualr-cli生成的项目&quot; class=&quot;headerlink&quot; title=&quot;文件介绍(angualr-cli生成的项目)&quot;&gt;&lt;/a&gt;文件介绍(angualr-cli生成的项目)
      
    
    </summary>
    
      <category term="angular" scheme="https://zq562895852.github.io/categories/angular/"/>
    
    
      <category term="angular目录" scheme="https://zq562895852.github.io/tags/angular%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>angular-cli</title>
    <link href="https://zq562895852.github.io/2018/11/09/home/"/>
    <id>https://zq562895852.github.io/2018/11/09/home/</id>
    <published>2018-11-09T02:12:43.000Z</published>
    <updated>2018-12-12T07:54:40.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>  最近闲着没事，就折腾了一下angular-cli,官方文档<a href="https://cli.angular.io" target="_blank" rel="noopener">anguar-cli</a>, 由于许多东西还在研究，后续持续更新…</p><h2 id="angular-cli-命令合集"><a href="#angular-cli-命令合集" class="headerlink" title="angular-cli 命令合集"></a>angular-cli 命令合集</h2><h3 id="项目生成"><a href="#项目生成" class="headerlink" title="项目生成"></a>项目生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @angular/cli   <span class="string">"全局安装"</span></span><br><span class="line">$ ng new myProject   <span class="string">"创建新项目 myProject 是项目文件名"</span></span><br><span class="line">$ <span class="built_in">cd</span> myProject   <span class="string">"进入 myProject 文件夹"</span></span><br><span class="line">$ ng server   <span class="string">"server/serve都可以，但是我碰到serve启动不成功的情况，这可能和版本更新有关。默认情况下ng会安装依赖，不需要npm install 就可以直接启动"</span></span><br><span class="line">$ ng new myProject --routing   <span class="string">"这个命令可以直接生成带有路由的项目，一般都会用的到，当然除了--routing还有其他的参数--prefix组件的前缀"</span></span><br></pre></td></tr></table></figure><h3 id="创建项目具体模块"><a href="#创建项目具体模块" class="headerlink" title="创建项目具体模块"></a>创建项目具体模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate class my-new-class              // 新建 class</span><br><span class="line">$ ng generate component my-new-component      // 新建组件</span><br><span class="line">$ ng generate directive my-new-directive      // 新建指令</span><br><span class="line">$ ng generate enum my-new-enum                // 新建枚举</span><br><span class="line">$ ng generate module my-new-module            // 新建模块</span><br><span class="line">$ ng generate pipe my-new-pipe                // 新建管道</span><br><span class="line">$ ng generate service my-new-service          // 新建服务</span><br></pre></td></tr></table></figure><p>  简写(使用命令的好处是不用在文件来回引入，引入文件很多，很容易遗漏)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ng g cl my-new-class        // 新建 class</span><br><span class="line">$ ng g c my-new-component     // 新建组件</span><br><span class="line">$ ng g d my-new-directive     // 新建指令</span><br><span class="line">$ ng g e my-new-enum          // 新建枚举</span><br><span class="line">$ ng g m my-new-module        // 新建模块</span><br><span class="line">$ ng g p my-new-pipe          // 新建管道</span><br><span class="line">$ ng g s my-new-service       // 新建服务</span><br></pre></td></tr></table></figure></p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><hr><pre><code>如果有多个模块，使用命令创建组件要指定组件所属的模块，不指定会默认创建app.module的组件，但是有时候可能会报错。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ng g c my-new-component --module=app-routing    // 创建属于路由模块的组件，在路由模块会自动引入该模块</span><br><span class="line">$ ng g c my-new-component // 如果不指定模块默认所属在app.module模块中</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;  最近闲着没事，就折腾了一下angular-cli,官方文档&lt;a href=&quot;https://cli.angular.io
      
    
    </summary>
    
      <category term="angular" scheme="https://zq562895852.github.io/categories/angular/"/>
    
    
      <category term="angular命令" scheme="https://zq562895852.github.io/tags/angular%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
