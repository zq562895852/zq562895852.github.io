<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张旗</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zq562895852.github.io/"/>
  <updated>2018-11-22T09:03:34.947Z</updated>
  <id>https://zq562895852.github.io/</id>
  
  <author>
    <name>张旗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>angular4.x(基础篇-路由)</title>
    <link href="https://zq562895852.github.io/2018/11/22/basis-route/"/>
    <id>https://zq562895852.github.io/2018/11/22/basis-route/</id>
    <published>2018-11-22T02:15:16.000Z</published>
    <updated>2018-11-22T09:03:34.947Z</updated>
    
    <content type="html"><![CDATA[<p> 后续更新。。。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 后续更新。。。&lt;/p&gt;
&lt;h2 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular4.x(基础篇-内置模块以及语法)</title>
    <link href="https://zq562895852.github.io/2018/11/21/basis/"/>
    <id>https://zq562895852.github.io/2018/11/21/basis/</id>
    <published>2018-11-21T02:15:16.000Z</published>
    <updated>2018-11-22T09:02:49.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从app-module-ts说起"><a href="#从app-module-ts说起" class="headerlink" title="从app.module.ts说起"></a>从app.module.ts说起</h2><p><img src="/2018/11/21/basis/app.module.jpg" alt="生成的目录结构"></p><h3 id="NgModules模块"><a href="#NgModules模块" class="headerlink" title="NgModules模块"></a>NgModules模块</h3><hr><p>NgModule 是一些带有 @NgModule 装饰器的类。@NgModule 装饰器的 imports 数组会告诉 Angular 哪些其它的 NgModule 是当前模块  所需的，一般都是在imports数组中放置一些内置模块以及服务。</p><hr><h3 id="CommonModule模块"><a href="#CommonModule模块" class="headerlink" title="CommonModule模块"></a>CommonModule模块</h3><hr><p>CommonModule 导出所有基本的 Angular 指令和管道  NgIf(判断)、NgForOf(循环，也可用NgFor)、NgClass(添加删除css类)、NgStyle(修改样式)、NgSwitch(和NgIf类似) 等指令(还有更多)，以及一些 CurrencyPipe(数字转金额),DatePipe(日期格式化),DecimalPipe(数字转字符串) 等管道。</p><hr><h3 id="FormsModule-ReactiveFormsModule模块"><a href="#FormsModule-ReactiveFormsModule模块" class="headerlink" title="FormsModule , ReactiveFormsModule模块"></a>FormsModule , ReactiveFormsModule模块</h3><hr><p>FormsModule 许多和表单相关的指令，后面会详细介绍，<br>ReactiveFormsModule 构建响应式表单，封装了根据规则提示的表单，后面详细介绍。</p><hr><h3 id="BrowserModule模块"><a href="#BrowserModule模块" class="headerlink" title="BrowserModule模块"></a>BrowserModule模块</h3><hr><p>BrowserModule 运行在浏览器中必须的模块</p><hr><h3 id="HttpClientModule模块"><a href="#HttpClientModule模块" class="headerlink" title="HttpClientModule模块"></a>HttpClientModule模块</h3><hr><p>HttpClientModule 和服务器通讯的模块，一般是封装在单独的文件中</p><hr><h3 id="BrowserAnimationsModule-NoopAnimationsModule模块"><a href="#BrowserAnimationsModule-NoopAnimationsModule模块" class="headerlink" title="BrowserAnimationsModule , NoopAnimationsModule模块"></a>BrowserAnimationsModule , NoopAnimationsModule模块</h3><hr><p>BrowserAnimationsModule 开启动画 NoopAnimationsModule 关闭动画</p><hr><h3 id="RouterModule模块"><a href="#RouterModule模块" class="headerlink" title="RouterModule模块"></a>RouterModule模块</h3><hr><p>RouterModule 路由相关模块</p><hr><h3 id="从最简单的说起"><a href="#从最简单的说起" class="headerlink" title="从最简单的说起"></a>从最简单的说起</h3><ol><li><p>插值表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;My current hero is &#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;img src=<span class="string">"&#123;&#123;imageUrl&#125;&#125;"</span> style=<span class="string">"height:30px"</span>&gt;</span><br><span class="line">&lt;p&gt;The sum of 1 + 1 is not &#123;&#123;1 + 1 + getVal()&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>支持简单的表达式，不支持赋值运算符，位运算，自增自减等比较复杂的</p></li><li><p>事件绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=<span class="string">"deleteHero()"</span>&gt;Delete&lt;/button&gt;</span><br><span class="line">&lt;button (click)=<span class="string">"onSave(<span class="variable">$event</span>)"</span>&gt;Save&lt;/button&gt; <span class="string">'$event事件对象'</span></span><br><span class="line">&lt;input [value]=<span class="string">"currentHero.name"</span> (input)=<span class="string">"currentHero.name=<span class="variable">$event</span>.target.value"</span> &gt;</span><br></pre></td></tr></table></figure><p>和vue差不多，其实很多框架都比较类似，当然也可以用bind-、on-、bindon-前缀绑定</p></li><li><p>数据绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="built_in">bind</span>-src=<span class="string">"imageUrl"</span>&gt;</span><br><span class="line">&lt;img [src]=<span class="string">"imageUrl"</span>&gt;  <span class="string">'属性绑定等价与上面'</span></span><br><span class="line">&lt;button [disabled]=<span class="string">"isUnchanged"</span>&gt;Save&lt;/button&gt; <span class="string">'属性绑定'</span></span><br><span class="line">&lt;div [ngClass]=<span class="string">"&#123;'special': isSpecial&#125;"</span>&gt;&lt;/div&gt; <span class="string">'类绑定不会覆盖已有的类，只会添加或删除当前类'</span></span><br><span class="line">&lt;input [(ngModel)]=<span class="string">"name"</span>&gt; <span class="string">'双向绑定，官方叫她'</span> &gt;&gt;盒子里放香蕉</span><br><span class="line">&lt;button [attr.aria-label]=<span class="string">"help"</span>&gt;<span class="built_in">help</span>&lt;/button&gt; <span class="string">'自定义属性等'</span></span><br><span class="line">&lt;div [class.special]=<span class="string">"isSpecial"</span>&gt;Special&lt;/div&gt; <span class="string">'css类名不会覆盖已有的类'</span></span><br><span class="line">&lt;button [style.color]=<span class="string">"isSpecial ? 'red' : 'green'"</span>&gt; <span class="string">'行内样式'</span></span><br><span class="line">&lt;button [style.font-size.em]=<span class="string">"isSpecial ? 3 : 1"</span> &gt;Big&lt;/button&gt;</span><br><span class="line">&lt;button [style.font-size.%]=<span class="string">"!isSpecial ? 150 : 50"</span> &gt;Small&lt;/button&gt;</span><br><span class="line">&lt;app-hero-detail [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-hero-detail&gt; <span class="string">'组件传值，方括号一定要有，否则就是字符串了'</span></span><br><span class="line">&lt;div class=<span class="string">"bad curly special"</span> [class]=<span class="string">"badCurly"</span>&gt;Bad curly&lt;/div&gt; </span><br><span class="line"><span class="string">'官方说badCurly有或无会覆盖原有的类 亲测在有[class.special]，[ngClass]同时存在的情况下不会覆盖'</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;img src=<span class="string">"&#123;&#123;heroImageUrl&#125;&#125;"</span>&gt; is the &lt;i&gt;interpolated&lt;/i&gt; image.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;img [src]=<span class="string">"heroImageUrl"</span>&gt; is the &lt;i&gt;property bound&lt;/i&gt; image.&lt;/p&gt;</span><br><span class="line"> <span class="string">'上面和下面这两种数据绑定作用相同'</span></span><br><span class="line">&lt;p&gt;&lt;span&gt;<span class="string">"&#123;&#123;title&#125;&#125;"</span> is the &lt;i&gt;interpolated&lt;/i&gt; title.&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="string">"&lt;span [innerHTML]="</span>title<span class="string">"&gt;&lt;/span&gt;"</span> is the &lt;i&gt;property bound&lt;/i&gt; title.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>模板绑定是通过 property 和事件来工作的(官方介绍的比较详细可以去看官方文档)</p></li><li><p>结构模板指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=<span class="string">"isActive"</span>&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;app-hero-detail *ngIf=<span class="string">"isActive"</span>&gt;&lt;/app-hero-detail&gt; <span class="string">'if判断，必须带*号'</span></span><br><span class="line">&lt;div *ngFor=<span class="string">"let hero of heroes"</span>&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;app-hero-detail *ngFor=<span class="string">"let hero of heroes"</span> [hero]=<span class="string">"hero"</span>&gt;&lt;/app-hero-detail&gt;<span class="string">'循环'</span></span><br><span class="line">&lt;div *ngFor=<span class="string">"let hero of heroes; let i=index"</span>&gt;&#123;&#123;i + 1&#125;&#125; - &#123;&#123;hero.name&#125;&#125;&lt;/div&gt;<span class="string">'带索引的 必须声明i否则拿不到索引'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;el-menu default-active=<span class="string">"1"</span> class=<span class="string">"el-menu-vertical-demo"</span> theme=<span class="string">"dark"</span>&gt;</span><br><span class="line">      &lt;el-submenu *ngFor=<span class="string">"let menu of menuList"</span> [title]=<span class="string">"menu.title"</span>&gt;</span><br><span class="line">        &lt;ng-container *ngIf = <span class="string">"menu.hasChildren;else menuBlock"</span>&gt;</span><br><span class="line">            &lt;el-menu-item-group   *ngFor=<span class="string">"let subMenu of menu.subs"</span> &gt;</span><br><span class="line">               &lt;el-submenu [title]=<span class="string">"subMenu.title"</span>&gt;</span><br><span class="line">                  &lt;el-menu-item *ngFor=<span class="string">"let subsMenu of subMenu.subMenu"</span> [to]=<span class="string">"subsMenu.index"</span>&gt;&#123;&#123;subsMenu.title&#125;&#125;&lt;/el-menu-item&gt;</span><br><span class="line">               &lt;/el-submenu&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">        &lt;/ng-container&gt;</span><br><span class="line">          &lt;ng-template <span class="comment">#menuBlock&gt;</span></span><br><span class="line">              &lt;el-menu-item  *ngFor=<span class="string">"let subMenu of menu.subs"</span> [to]=<span class="string">"subMenu.index"</span>&gt;&#123;&#123;subMenu.title&#125;&#125;&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/ng-template&gt;</span><br><span class="line">      &lt;/el-submenu&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line"><span class="string">'在这种循环和判断的模块中一个元素不能有多个块，上面这个例子，</span></span><br><span class="line"><span class="string">也就是不能把ngIf和ngFor放在同一个元素上否则报错，if判断的else语句使用要用#后面用else的部分'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div *ngFor=<span class="string">"let hero of heroes; trackBy: trackByHeroes"</span>&gt;</span><br><span class="line">  (&#123;&#123;hero.id&#125;&#125;) &#123;&#123;hero.name&#125;&#125;</span><br><span class="line">&lt;/div&gt; <span class="string">'trackBy有点像vue中key但是要声明才能使用'</span></span><br><span class="line"></span><br><span class="line">&lt;div [ngSwitch]=<span class="string">"currentHero.emotion"</span>&gt;</span><br><span class="line">      &lt;app-happy-hero    *ngSwitchCase=<span class="string">"'happy'"</span>    [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-happy-hero&gt;</span><br><span class="line">      &lt;app-sad-hero      *ngSwitchCase=<span class="string">"'sad'"</span>      [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-sad-hero&gt;</span><br><span class="line">      &lt;app-confused-hero *ngSwitchCase=<span class="string">"'confused'"</span> [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-confused-hero&gt;</span><br><span class="line">      &lt;app-unknown-hero  *ngSwitchDefault           [hero]=<span class="string">"currentHero"</span>&gt;&lt;/app-unknown-hero&gt;</span><br><span class="line">&lt;/div&gt; <span class="string">'ngSwitch指令和js一样的写法'</span></span><br><span class="line"></span><br><span class="line">&lt;input <span class="comment">#phone placeholder="phone number"&gt; '模板变量可以在其他位置拿到这个元素，以#或者ref声明这个变量'</span></span><br><span class="line">&lt;button (click)=<span class="string">"callPhone(phone.value)"</span>&gt;Call&lt;/button&gt;<span class="string">'模板变量作用整个模板作用域和循环let声明是不同的'</span></span><br></pre></td></tr></table></figure></li><li><p>管道操作符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;Title through uppercase pipe: &#123;&#123;title | uppercase&#125;&#125;&lt;/div&gt; <span class="string">'用法|后面跟名字即可'</span></span><br><span class="line">&lt;div&gt;Title through a pipe chain:&#123;&#123;title | uppercase | lowercase&#125;&#125;&lt;/div&gt;<span class="string">'可以有多个'</span></span><br><span class="line">&lt;div&gt;Birthdate: &#123;&#123;currentHero?.birthdate | date:<span class="string">'longDate'</span>&#125;&#125;&lt;/div&gt;<span class="string">'传值'</span></span><br><span class="line">&lt;div&gt;&#123;&#123;currentHero | json&#125;&#125;&lt;/div&gt;  <span class="string">'调试可以输出整个对象，数组'</span></span><br><span class="line">&lt;div&gt;The name is &#123;&#123;nullHero?.name&#125;&#125;&lt;/div&gt; <span class="string">'安全操作符，当对象nullHero为null时不会报错，</span></span><br><span class="line"><span class="string">这点比vue做的好，当然也可以多级像a?.b?.c?.d这样多级判断'</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  The  marker is &#123;&#123;<span class="variable">$any</span>(hero).marker&#125;&#125;</span><br><span class="line">&lt;/div&gt; <span class="string">'类型转换函数没用过暂时还不是很清楚，官方说防止类型转换错误'</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从app-module-ts说起&quot;&gt;&lt;a href=&quot;#从app-module-ts说起&quot; class=&quot;headerlink&quot; title=&quot;从app.module.ts说起&quot;&gt;&lt;/a&gt;从app.module.ts说起&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/201
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular4.x(基础篇-文件信息)</title>
    <link href="https://zq562895852.github.io/2018/11/12/index/"/>
    <id>https://zq562895852.github.io/2018/11/12/index/</id>
    <published>2018-11-12T02:12:43.000Z</published>
    <updated>2018-11-22T03:43:28.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件介绍-angualr-cli生成的项目"><a href="#文件介绍-angualr-cli生成的项目" class="headerlink" title="文件介绍(angualr-cli生成的项目)"></a>文件介绍(angualr-cli生成的项目)</h2><h5 id="生成的项目最外层结构-如图-，主要都集中在src文件夹和angular-cli-json这个文件中"><a href="#生成的项目最外层结构-如图-，主要都集中在src文件夹和angular-cli-json这个文件中" class="headerlink" title="生成的项目最外层结构(如图)，主要都集中在src文件夹和angular-cli.json这个文件中"></a>生成的项目最外层结构(如图)，主要都集中在src文件夹和angular-cli.json这个文件中</h5><p><img src="/2018/11/12/index/mulv.jpg" alt="生成的目录结构"></p><h5 id="angular-cli-json的主要信息"><a href="#angular-cli-json的主要信息" class="headerlink" title="angular-cli.json的主要信息"></a>angular-cli.json的主要信息</h5><p><img src="/2018/11/12/index/cli.jpg" alt="angular-cli.json的主要信息"></p><h5 id="src目录的主要信息"><a href="#src目录的主要信息" class="headerlink" title="src目录的主要信息"></a>src目录的主要信息</h5><p><img src="/2018/11/12/index/src.jpg" alt="src目录主要信息"></p><h5 id="main-ts入口信息"><a href="#main-ts入口信息" class="headerlink" title="main.ts入口信息"></a>main.ts入口信息</h5><p><img src="/2018/11/12/index/main.jpg" alt="main文件主要信息"></p><h5 id="app目录的主要信息"><a href="#app目录的主要信息" class="headerlink" title="app目录的主要信息"></a>app目录的主要信息</h5><p><img src="/2018/11/12/index/app.jpg" alt="app目录主要信息"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件介绍-angualr-cli生成的项目&quot;&gt;&lt;a href=&quot;#文件介绍-angualr-cli生成的项目&quot; class=&quot;headerlink&quot; title=&quot;文件介绍(angualr-cli生成的项目)&quot;&gt;&lt;/a&gt;文件介绍(angualr-cli生成的项目)
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular-cli</title>
    <link href="https://zq562895852.github.io/2018/11/07/home/"/>
    <id>https://zq562895852.github.io/2018/11/07/home/</id>
    <published>2018-11-07T11:01:15.943Z</published>
    <updated>2018-11-09T06:47:56.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>  最近闲着没事，就折腾了一下angular-cli,官方文档<a href="https://cli.angular.io" target="_blank" rel="noopener">anguar-cli</a>, 由于许多东西还在研究，后续持续更新…</p><h2 id="angular-cli-命令合集"><a href="#angular-cli-命令合集" class="headerlink" title="angular-cli 命令合集"></a>angular-cli 命令合集</h2><h3 id="项目生成"><a href="#项目生成" class="headerlink" title="项目生成"></a>项目生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @angular/cli   <span class="string">"全局安装"</span></span><br><span class="line">$ ng new myProject   <span class="string">"创建新项目 myProject 是项目文件名"</span></span><br><span class="line">$ <span class="built_in">cd</span> myProject   <span class="string">"进入 myProject 文件夹"</span></span><br><span class="line">$ ng server   <span class="string">"server/serve都可以，但是我碰到serve启动不成功的情况，这可能和版本更新有关。默认情况下ng会安装依赖，不需要npm install 就可以直接启动"</span></span><br><span class="line">$ ng new myProject --routing   <span class="string">"这个命令可以直接生成带有路由的项目，一般都会用的到，当然除了--routing还有其他的参数--prefix组件的前缀"</span></span><br></pre></td></tr></table></figure><h3 id="创建项目具体模块"><a href="#创建项目具体模块" class="headerlink" title="创建项目具体模块"></a>创建项目具体模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate class my-new-class              // 新建 class</span><br><span class="line">$ ng generate component my-new-component      // 新建组件</span><br><span class="line">$ ng generate directive my-new-directive      // 新建指令</span><br><span class="line">$ ng generate enum my-new-enum                // 新建枚举</span><br><span class="line">$ ng generate module my-new-module            // 新建模块</span><br><span class="line">$ ng generate pipe my-new-pipe                // 新建管道</span><br><span class="line">$ ng generate service my-new-service          // 新建服务</span><br></pre></td></tr></table></figure><p>  简写(使用命令的好处是不用在文件来回引入，引入文件很多，很容易遗漏)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ng g cl my-new-class        // 新建 class</span><br><span class="line">$ ng g c my-new-component     // 新建组件</span><br><span class="line">$ ng g d my-new-directive     // 新建指令</span><br><span class="line">$ ng g e my-new-enum          // 新建枚举</span><br><span class="line">$ ng g m my-new-module        // 新建模块</span><br><span class="line">$ ng g p my-new-pipe          // 新建管道</span><br><span class="line">$ ng g s my-new-service       // 新建服务</span><br></pre></td></tr></table></figure></p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><hr><pre><code>如果有多个模块，使用命令创建组件要指定组件所属的模块，不指定会默认创建app.module的组件，但是有时候可能会报错。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ng g c my-new-component --module=app-routing    // 创建属于路由模块的组件，在路由模块会自动引入该模块</span><br><span class="line">$ ng g c my-new-component // 如果不指定模块默认所属在app.module模块中</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;  最近闲着没事，就折腾了一下angular-cli,官方文档&lt;a href=&quot;https://cli.angular.io
      
    
    </summary>
    
    
  </entry>
  
</feed>
